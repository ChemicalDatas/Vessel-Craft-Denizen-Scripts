"Message Manager":
    type: assignment
    debug: false
    default constants:
        anchor: "curent_wander_location"
        speed: .65
        delay: d@1s-10s
        range: 10
    
    interact scripts:
    - 0 Message System

    actions:
        on assignment:
        - trigger name:chat state:true 
        - trigger name:click state:true
        - trigger name:proximity state:true radius:6 cooldown:20
        - chat "I am now wandering arround this location."
        - anchor add <npc.location> "id:<npc.constant[anchor]>"
        - run "Npc Task Execute" delay:d@3s-20s
                
        on complete navigation:
        - run "Npc Task Execute" delay:<npc.constant[delay]>
        
        on cancel navigation:
        - run "Npc Task Execute" delay:<npc.constant[delay]>
        
        on spawn:
        - run "Npc Task Execute" delay:<npc.constant[delay]>  
            
        on click:
        - chat "Im a messager npc, I will send players messages for you to someone."
        - narrate '<green>Your options are<white>: <gold>SEND, MESSAGES'
        
        on enter proximity:
        - if !<player.flag[has_messages_from]> == null chat "<dark_purple><player.name> <white>you have some messages."
          else chat "No messages today."
    
"Message System":
    type: Interact
    steps:
        "default":
            chat Trigger:
                'send':
                    Trigger: "I want you to /send/ some mail to..."
                    script:
                    - chat "Please say a player name, It must be thier exact name."
                    - chat "next time they log in and talk to me they will get it."
                    - zap "player identifier"

                'messages':
                    Trigger: "Do you have any /messages/ for me?"
                    script:
                    - define self <player.name>
                    - chat "I might... Let me check for you..."
                    
                    #- narrate "has messages from: <player.flag[has_messages_from].as_list>"
                    #- narrate "trying <player.flag[has_messages_from]> for the for each..."
                    
                    #This is where im having errors I cant seem to iterate though the list
                    - foreach <player.flag[has_messages_from].as_list> {
                     - chat "message from <dark_purple>%value%:"
                     - narrate "<proc[Search for Messages].context[%value%|%self%]>"
                    
                     - flag p@%value% message_to_%self%:!
                     }
                    # Finished with all messages so clears them out
                    - flag player has_messages_from:!
                    
                    
                    
        "player identifier":
            chat Trigger:
                'player selection':
                    Trigger: /REGEX:.+/
                    script:
                    - flag player message_recipient:<context.message> 
                    - chat "Ok, send to: <dark_purple><context.message>"
                    - chat "are you sure? just tell me <gold>no <white>if your not, or <gold>yes <white>if you are."
                    
                'not that player':
                    Trigger: "/no/ not them."
                    script:
                    - flag player message_recipient:!
                    - chat "Ok."
                    - zap default
                    
                'yep that player':
                    Trigger: "/yes/, that player"
                    script:
                    - chat "Ok, just tell me what your message is then."
                    - zap "message contents"
                    
                    
        "message contents":
            chat Trigger:
                'player':
                    Trigger: /REGEX:.+/
                    script:
                    # Messages are stored on the player that sent them
                    # The reciepient gets a flag with a list of players that sent messages to them
                    # The recipient then searches those players for a flag that starts with
                    # message_to_ + %recipient% 
                    #
                    - define recipient <player.flag[message_recipient]>
                    # Save message to a flag on sender
                    - flag player message_to_%recipient%:<context.message>
                    
                    # Setting the message notification list of the reciepient
                    - flag p@%recipient% has_messages_from:|:<player.name>
                    -
                    - chat "Ok, <context.message>"
                    - chat "will be sent to <dark_purple>%recipient%<white>..."
                    - chat "They will get the message next time they check in."
                    -
                    - flag player message_recipient:!
                    - zap "default"

                    
"Search for Messages":
    type: procedure
    definitions: sender|recipient
    script:
    - define message_for_player message_to_%recipient%
    #- narrate "checking %sender% for flag %message_for_player%"
    - if <p@%sender%.has_flag[%message_for_player%]> == true determine <p@%sender%.flag[%message_for_player%]>
      else determine "No Messages"
                    

    