Denizen:
    type: assignment
    actions:
        on spawn:
        - announce "<npc.name> is starting his queues" to_ops
        - define queue_list li@movement_queue|logic_queue|chat_queue|memory_queue|action_queue
        - define queue_scripts "li@Npc Movement Task|Npc Logic Task|Npc Chat Task|Npc Memory Task|Npc Action Task"
        - foreach <def[queue_list]> {
            - define queue <npc.id>_<def[value]>
            - announce "queue<&co> <def[queue]> exists? <queue.exists[<def[queue]>]>"
            - if <queue.exists[<def[queue]>]> {
                # This is where you can run any script in the task queue
                - queue <def[queue].as_queue> resume
                } else {
                - define script <def[queue_scripts].get[<def[loop_index]>]>
                - announce "Starting script<&co> <red><def[script]><reset> queue<&co> <gold><def[queue]>"
                - run <def[script]> id:<def[queue]>
                }
            }
        - chat "Im back." no_target
        
        on despawn:
        #If npc isnt persistent remove 
        
        on remove:
        
        on assignment:
        - chat "Ive just had an assignment!" no_target
        
        on completed objective:
        

#############################################################################################################
########################## Navigation State Triggers ########################################################
#############################################################################################################
        on begin navigation:
        - run "Beacon Location" def:<npc.navigator.target_location||<npc.location>> instantly
        
        on complete navigation:
        - chat  "Made it to where I was going." no_target
        
        on cancel navigation:
        - chat "I need to pick a different location." no_target
        
        
        on stuck:
        - chat "<npc.name> Im stuck, seems I cant get there." no_target
        #if the npc is floating It will not pathfind anyplace else.
        - if <npc.location.below.material> != m@air queue clear
        - chat "Hmmm.... I seem to be floating..." no_target
        - define direction li@1,0,0|0,0,1|-1,0,0|0,0,-1
        - define possibles li@
        - foreach <def[direction]> {
            - define target_location <npc.location.add[<def[value]>]>
            - if <def[target_location].below.material>  != m@air
              && <def[target_location].material>        == m@air
              && <def[target_location].above.material>  == m@air
              define possibles <def[possibles].include[<def[target_location]>]>
            }
        - define safe_spot <def[possibles].random>
        - chat "Going to<&co> <def[safe_spot].simple>" no_target
        - teleport <npc> <def[safe_spot]>
        
        # - run "Npc Tactics Executor" delay:d@1s
        #- determine none passively
        
        #- flag npc "Travel Distress"
        #- flag npc knowledge.travel_distress_locations:<-:<npc.flag[Travel_location]>
        #- run "Npc Task Execute" delay:<npc.constant[delay]>
        #- announce "<npc.name> canceled its navigation"
        #- run "Add Knowledge" "def:cancel_navigation|<reason>|<npc.flag[knowledge.cancel_navigation.<context.reason>].add[1]>"

#############################################################################################################
########################## Npc State Triggers ###############################################################
#############################################################################################################          
#Sets of npc triggers that determine a state of change in the npc.
        
        on exhausted:
        
        #Relevant for npc fishing
        on start fishing:
        on stop fishing:
        on cast fishing rod:
        on reel in fishing rod:
        
        on dig:
        #Run the task dispatcher
        
        on death:
        #Place a carpet then start a countdown for removal
        #If npc isnt revived before the countdown ends. Remove /despawn npc.

#############################################################################################################
########################## Entity Interaction Triggers ######################################################
#############################################################################################################  
#Sets of npc triggers that indicate entity enviromental changes.'

        on mob enter proximity:
        #on <entity> enter proximity:
        #on mob move proximity:
        #on <entity> move proximity:
        # - run "Add Knowledge" def:<%entity%>|encountered
        
        
        on kill:
        #on kill of <entity>:
        
        #Npc death is handled elsewhere
        #this is for recording in the area
        #or announcing the npc death wails to other npcs
        on death by entity:
        #on death by <entity>:
        on death by block:
        #on death by <cause>:
        #Npc script to determine its perceptiveness and announce 
        #to local npcs or players in the area what killed the npc.
        #For extra sensing players or npcs this could me a chill to premonitions
        #
        # - run "Add Knowledge" def:<%entity%>|<player.location>

        on attack:
        #on attack on <entity>:
        
        
        on hit:
        #on hit <entity>:
        #If hunting add another hit queue
        #Check if requirements are met then schedure next item
        
        on interact:
        #- if <context.type> == block {
        #    - announce "<npc.name> Interacated with <context.location.material>"
        #    }
        #- if <context.type> == entity {
        #    - announce "<npc.name> Interacted with a <context.entity.name>"
        #    }
        
        
#############################################################################################################
########################## Player Interaction Triggers ######################################################
############################################################################################################# 
        on chat:
        - if <script.yaml_key[<context.message>]||no_internal_code> != no_internal_code {
            - chat "yeah, I can do that."
            - inject locally <context.message>
            - queue clear
            }
        - chat "I dont know how to do<&co> <context.message>. Ill see what SAI Says."
        - if !<server.list_scripts.contains[<context.message.as_script>]||false> {
            - chat "Sorry, I couldnt find out how to do that. instruction<&co> <red><context.message>"
            - queue clear
            }
        - if <context.message.as_script.yaml_key[definitions].as_list.is_empty||true> {
            - chat "running script<&co> <context.message>"
            - inject <context.message>
            - queue clear
            } else {
            - chat "Sorry, that script required extra input. Cant do it. Ive tried..."
            }
        
        on no click trigger:
        #Update tasks if allowed to wake
        #Maybe an npc is busy so pickpocket it
        
        on click:
        #- narrate "You clicked me"
        #- inject code_injection
        - queue q@<npc.id>_logic_tick resume
        
        #Fire Player Npc enteraction task
        #Engage npc
        
        
        on unavailable:
        
        on no damage trigger:
        
        on damage:
        
        on push:
        #Push check should contain a queue cancel if its relivant to the npc.
        #- run "Push Interuption Check" instantly
        #- run "Push Handling Scheduler" def:
        #Tag Player as rude
        
        on push return:
        #
#############################################################################################################
########################## Player Proximity Triggers ########################################################
#############################################################################################################

        on enter proximity:
        
        on exit proximity:
        #on move proximity:
        
        on proximity:
        


    start logic tick:
    - chat "Im starting my logic tick"
    - run "Npc Logic Tick"  id:<npc.id>_logic_tick
    
    start chat tick:
    - run "Npc Chat Tick"   id:<npc.id>_chat_tick
    
    clear logic tick:
    - chat "Im clearing my logic tick"
    - queue q@<npc.id>_logic_tick clear







