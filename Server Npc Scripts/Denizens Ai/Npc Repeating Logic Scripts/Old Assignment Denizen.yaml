Npc Event Listener:
    #############################################################################################################################
    #                                                                                                                           #
    # The Npc World Event listener.                                                                                             #
    # This listens for custom events scheduled in the scripts.                                                                  #
    #                                                                                                                           #
    #############################################################################################################################
    type: world
    events:
        on completed task:
        - announce "Task: <green><context.task> <reset>has completed"
        - announce "<blue>Placeholder for npc task execute."



Denizen:
    #############################################################################################################################
    #                                                                                                                           #
    # This script depends on the constants assigned.                                                                            #
    # When you click on the npc he will then set that location as an anchor.                                                    #
    # Then wander around it from time to time.                                                                                  #
    #                                                                                                                           #
    #                                                                                                                           #
    # Npc's should be non-persistent un-notable npcs random pawning around.                                                     #
    # After some requirements they should become notable or persistent npcs.                                                    #
    #                                                                                                                           #
    #                                                                                                                           #
    # My ideas include npcs that are 'persistent' and non persistent.                                                           #
    # on de-spawn or death npcs don't re-spawn and are deleted                                                                  #
    # Their inventory is dropped or just forgotten...                                                                           #
    #                                                                                                                           #
    #############################################################################################################################
    type: assignment
    default constants:
        greeting: "Good day sir!"
        anchor: "curent_wander_location"
        #Only gets set on spawn....
        speed: .65
        delay: d@1s-10s
        range: 10
        sleep_time: d@1s-10s
        task_reschedule: d@1m-2m
        
        mood enums:
            angry: <red>
            cautious: <yellow>
            good: <blue>
            happy: <green>
            sick: <dark_purple>
        
        states:
        - food
        - water
        - energy
        - exhaustion
        - awareness
        - mood
        - 
        
        stats:
        - vigor
        - strength
        - intelligence
        - knowledge
        - intunement
        
        #references the type of work 'scheduler' for the npc.
        #Types of personal schedulers too.
        work: "Vagrant Task Execute"
        personal:
        #Could be: blacksmith, king, fisherman, bandit, thief, apothecary, scribe, 
        #librarian, mage, enchanter, craftsman, farmer, merchant, inn_keeper, guard, royal_guard
        #Priest, hunter, miner, logger, Carpenter
        #Adventurer, <-Special npc's that are random and despawn
        #Information and service (server use)
    
    actions:
        on spawn:
        - announce "Npc: <npc.name> spawned and will start his logic tick."
        - run "Npc Logic Tick" id:<npc.id>_logic_tick
        #- run "Npc Task Execute" delay:<npc.constant[delay]> id:<npc.id>_scheduled_queue
        
        on despawn:
        #If npc isnt persistent remove 
        
        on remove:
        
        on assignment:
        - flag npc tactic_stack:Wander
        - flag npc sight_range:<npc.navigator.range>
        - anchor add <npc.location> "id:<npc.constant[current wander location]>"
        
        on completed objective:
        #- queue q@<npc.id> "Npc Task Execute" delay:<npc.constant[delay]> id:<npc.id>_scheduled_queue
        #remove objective from objective queue
        - flag <npc> objective:->:<context.objective>
        - wait d@4s
        - queue q@<npc.id>_logic_tick resume
        

#############################################################################################################
########################## Navigation State Triggers ########################################################
#############################################################################################################
        on begin navigation:
        #- run "Beacon Location" def:<npc.navigator.target_location||<npc.location>>
        
        on complete navigation:
        #- run "Npc Tactics Executor"
        - chat  "Made it to where I was going." no_target
        - wait d@4s
        - queue q@<npc.id>_logic_tick resume
        
        on cancel navigation:
        - chat "I need to pick a different location." no_target
        - wait d@4s
        - queue q@<npc.id>_logic_tick resume
        #- run "Npc Tactics Executor"
        #Add some countdown for retries to get there.
        #Else find a fall back method.
        
        on stuck:
        - chat "<npc.name> Im stuck, seems I cant get there." no_target
        #if the npc is floating It will not pathfind anyplace else.
        - if <npc.location.below.material> == m@air {
            - chat "Hmmm.... I seem to be floating..." no_target
            - define direction li@1,0,0|0,0,1|-1,0,0|0,0,-1
            - define possibles li@
            - foreach <def[direction]> {
                - define target_location <npc.location.add[<def[value]>]>
                - if <def[target_location].below.material>  != m@air
                  && <def[target_location].material>        == m@air
                  && <def[target_location].above.material>  == m@air
                  define possibles <def[possibles].include[<def[target_location]>]>
                }
            - define safe_spot <def[possibles].random>
            - chat "Going to<&co> <def[safe_spot].simple>" no_target
            - teleport <npc> <def[safe_spot]>
            }
        
        # - run "Npc Tactics Executor" delay:d@1s
        #- determine none passively
        
        #- flag npc "Travel Distress"
        #- flag npc knowledge.travel_distress_locations:<-:<npc.flag[Travel_location]>
        #- run "Npc Task Execute" delay:<npc.constant[delay]>
        #- announce "<npc.name> canceled its navigation"
        #- run "Add Knowledge" "def:cancel_navigation|<reason>|<npc.flag[knowledge.cancel_navigation.<context.reason>].add[1]>"

#############################################################################################################
########################## Npc State Triggers ###############################################################
#############################################################################################################          
#Sets of npc triggers that determine a state of change in the npc.
        
        on exhausted:
        - flag npc food:10
        #- run "Food Scheduler"
        #Start queue to find food / water

        
        
        #Relevant for npc fishing
        on start fishing:
        on stop fishing:
        on cast fishing rod:
        on reel in fishing rod:
        
        on dig:
        #Run the task dispatcher
        
        on death:
        #Place a carpet then start a countdown for removal
        #If npc isnt revived before the countdown ends. Remove /despawn npc.

#############################################################################################################
########################## Entity Interaction Triggers ######################################################
#############################################################################################################  
#Sets of npc triggers that indicate entity enviromental changes.'

        on mob enter proximity:
        on <entity> enter proximity:
        #on mob move proximity:
        #on <entity> move proximity:
        # - run "Add Knowledge" def:<%entity%>|encountered
        
        
        on kill:
        on kill of <entity>:
        #Check if requirements are met
        #
        # - run "Add Knowledge" def:<%entity%>|<player.location>
        
        
        #Npc death is handled elsewhere
        #this is for recording in the area
        #or announcing the npc death wails to other npcs
        on death by entity:
        on death by <entity>:
        on death by block:
        on death by <cause>:
        #Npc script to determine its perceptiveness and announce 
        #to local npcs or players in the area what killed the npc.
        #For extra sensing players or npcs this could me a chill to premonitions
        #
        # - run "Add Knowledge" def:<%entity%>|<player.location>

        on attack:
        on attack on <entity>:
        
        
        on hit:
        on hit <entity>:
        #If hunting add another hit queue
        #Check if requirements are met then schedure next item
        
        on interact:
        #- if <context.type> == block {
        #    - announce "<npc.name> Interacated with <context.location.material>"
        #    }
        #- if <context.type> == entity {
        #    - announce "<npc.name> Interacted with a <context.entity.name>"
        #    }
#############################################################################################################
########################## Player Interaction Triggers ######################################################
############################################################################################################# 
        on chat:
        - if <script.yaml_key[<context.message>]||no_internal_code> != no_internal_code {
            - chat "yeah, I can do that."
            - inject locally <context.message>
            - queue clear
            }
        - chat "I dont know how to do<&co> <context.message>. Ill see what SAI Says."
        - if !<server.list_scripts.contains[<context.message.as_script>]||false> {
            - chat "Sorry, I couldnt find out how to do that. instruction<&co> <red><context.message>"
            - queue clear
            }
        - if <context.message.as_script.yaml_key[definitions].as_list.is_empty||true> {
            - chat "running script<&co> <context.message>"
            - inject <context.message>
            - queue clear
            } else {
            - chat "Sorry, that script required extra input. Cant do it. Ive tried..."
            }
        
        on no click trigger:
        #Update tasks if allowed to wake
        #Maybe an npc is busy so pickpocket it
        
        on click:
        #- narrate "You clicked me"
        #- inject code_injection
        - queue q@<npc.id>_logic_tick resume
        #Fire Player Npc enteraction task
        #Engage npc
        
        
        on unavailable:
        #Like if the npc is engaged
        #Things to engage the npc with
        #Hunting
        #Sleeping
        #Cooking
        #
        #Narrate to the player what the npc is seeming to be doing
        #Maybe a check for player perception? then provide some npc work flags that describe what it could look like thier doing?
        #Narrate scripts might help with the player perception for automation of the narrations
        
        on no damage trigger:
        #Run Player Npc Interaction task
        
        on damage:
        #A check to see if the npc's intention queue or the action queue needs to be stoped / reset and task rescheduling begins
        #There should be no queue attached to the check. As its a general check and the check its self will cancel the queue
        #Therefore running the next item.
        #- run "Damage Interuption Check" instantly
        #- run "Damage Handling Scheduler" def:
        
        on push:
        #Push check should contain a queue cancel if its relivant to the npc.
        #- run "Push Interuption Check" instantly
        #- run "Push Handling Scheduler" def:
        #Tag Player as rude
        
        on push return:
        #
#############################################################################################################
########################## Player Proximity Triggers ########################################################
#############################################################################################################

        on enter proximity:
        #- run "Show Npc Task Queue"
        #- run "Show Npc Task Status"
        
        on exit proximity:
        #on move proximity:
        on proximity:
        - flag <npc> recent_events:|:<>
        
        on custom action:
        - flag <npc> recent_events:|:<context.action||no_action_specified>/<context.arguments>

    start logic tick:
    - chat "Im starting my logic tick"
    - run "Npc Logic Tick"  id:<npc.id>_logic_tick
    
    start chat tick:
    - run "Npc Chat Tick"   id:<npc.id>_chat_tick
    
    clear logic tick:
    - chat "Im clearing my logic tick"
    - queue q@<npc.id>_logic_tick clear

##############

Npc Waiting for Chat Response:
    type: task
    definitions: script|input|wait
    script:
    - if <def[script]||none> != none 
      define script <def[script]>
    
    - if <def[input]||none> != none 
      define input <def[input]>
    
    - if <def[wait]||false> {
          - queue pause
          }
    
    - chat "alright, ive got your response. Ill see if that can be done. <blue>script<&co> <def[input]> <yellow>args<&co> <def[input]>"
    - run <def[script]> def:<def[input]>
    


code_injection:
    type: task
    script:
    - define code <player.chat_history[1]||none>
    - if <script.yaml_key[<def[code]>]||no_code_branch> == no_code_branch {
        - chat "I dont know how to do <&sq><def[code]><&sq>. You might have to script that into my code."
        - queue clear
        }
      
    - inject locally path:<def[code]>
    
    test:
    - announce "You entered into the code test"
    
    test2:
    - announce "You entered into code test 2! wow! Another set of scripts injected from locally...."
