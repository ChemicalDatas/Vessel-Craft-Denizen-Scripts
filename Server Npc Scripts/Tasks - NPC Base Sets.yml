#This is a set of tasks that are base to animating npcs.
#This should only contain scripts that contain no queue. To be used by something that has or is a part of a queue.
#Some of these automatically have the npc attached. 
#Some of these are not general tasks for calling. They have npcs already attached or 
#entity references already filled out.


# todo: Refractor scripts that are npc based from the ones that are general server based.\
# the general server based can be moved to a server folder. 
# todo: rename the npc based scripts to include in the name "NPC Cast Spell", "NPC Walk To"

################################################################################################
####################### Dynamic Sets ###########################################################
################################################################################################

DynamicExecute:
    #Sister Command to _DynamicExecute. Required that entries be <escape:>'d first.
    
    #info: Got an idea for a work around with a separate command.
    #narrate | yaml | 
    type: task
    definitions: command|args
    script:
    - execute as_npc
      "ex <def[command]> <def[args].unescaped||>"
    

################################################################################################
####################### Constant Sets ##########################################################
################################################################################################


Set Constant:
    type: task
    definitions: name|value
    script:
    - execute as_npc
      "npc select <npc.id>"
      
    - execute as_npc
      "npc constant --set <def[name]> --value <def[value]>"
    



################################################################################################
####################### Anchor Sets ############################################################
################################################################################################

Anchor:
    #action can be
    #   %add <def[location]>%
    #   %remove%
    #   assume
    #   walkto
    #   walknear
    type: task
    definitions: action|id|range
    script:
    - anchor <def[action]>
      i:<def[id]>
      r:<def[range]>
    


Walk Near Anchor:
    #Id = Name of location to walk around
    type: task
    definitions: id
    script:
    - anchor walknear
      i:<def[id]||curent_wander_location>
      r:<npc.constant[range]||10>
    

################################################################################################
####################### Delay Sets #############################################################
################################################################################################

NPCDelay:
    type: task
    definitions: delay
    script:
    - define queue
      <npc.id>_action_queue
    
    - queue <def[queue].as_queue>
      delay:<def[delay]||d@1s>
    

NPCPause Queue:
    #This pauses the queue.
    #Generally used after a walk to command as something will need to resume the queue afterwards.
    #The npc assignment contains an 'on complete navigation' action. That should resume the queue
    #this has paused
    type: task
    script:
    - define queue
      <npc.id>_action_queue
      
    - if <queue.exists[<def[queue]>]>
      queue <def[queue].as_queue>
      pause
    
    #- announce "Pausing <red>Queue  (resuming when a resume queue is called...)"


NPCResume Queue:
    #This resumes the queue. This should be used in some sort of action like 'on travel complete'
    #As this should resume an Npc-action_queue.
    type: task
    script:
    - define queue
      <npc.id>_action_queue
      
    - if <queue.exists[<def[queue]>]>
      queue <def[queue]>
      resume
    #- announce "Resuming <green>Queue"



################################################################################################
####################### Animation Sets #########################################################
################################################################################################

Lay Down:
    type: task
    definitions:
    script:
    - define location <npc.location>
    - define material <def[location].material>
    - modifyblock <def[location]> m@bed_block no_physics
    - run Animate SLEEP
    - modifyblock <def[location]> <def[material]> no_physics

Npc Animate:
    type: task
    definitions: animation
    script:
    - animate <npc>
      animation:<def[animation]>

NPC Look:
    type: task
    definitions: location|time
    script:
    - look <npc>
      <def[location]>
      duration:<def[time]||d@2s>

NPC Animate Interact:
    type: task
    speed: 12t
    script:
    - animate <npc> animation:ARM_SWING
    - animate <npc> animation:ARM_SWING
    - animate <npc> animation:ARM_SWING
    - animate <npc> animation:ARM_SWING

################################################################################################
####################### Movement Sets ###########################################################
################################################################################################
Walk Near:
    #
    # Difference in between this and wander nearby is that this uses a default location of the npc
    # as a reference so if you keep using this your npc will end up some place you don't know.
    #
    type: task
    definitions: location|speed|radius|height
    script:
    - define speed
      <def[speed]||.67>
      
    - define radius
      <def[radius]||10>
    
    - define height
      <def[height]||2>
    
    - define location
      <def[location]||<npc.location>>
    
    - define cuboid
      cu@<def[location].add[%radius%,%height%,%radius%]>|<def[location].sub[%radius%,%height%,%radius%]>
    
    - define locations
      <def[cuboid].get_spawnable_blocks>
    
    
    - walk <npc> <def[locations].random> speed:<def[speed]> auto_range





Walk To:
    type: task
    definitions: location|speed
    script:
    - walkto <def[location]>
      speed:<def[speed]||.67>
      auto_range



__Walk To__:
    type: task
    script:
    - walkto <npc.flag[Navigation_Target]>
      speed:<npc.flag[navigation_speed]> 
      auto_range


Teleport:
    type: task
    definitions: location
    script:
    - teleport <npc>
      <def[location]>
    

Wander Nearby:
    type: task
    script:
    - if !<npc.has_flag[curent_wander_location]>
      flag npc curent_wander_location:<npc.location>
      
    - if !<npc.has_flag[wander_range]>
      flag npc wander_range:10
      
    - if !<npc.has_flag[wander_range_height]>
      flag npc wander_range_height:10
      
    - define location
      <npc.flag[curent_wander_location]>
      
    - define range
      <npc.flag[wander_range]>
    
    - define cuboid
      cu@<def[location].add[%range%,2,%range%]>|<def[location].sub[%range%,2,%range%]>
    
    - define locations
      <def[cuboid].get_spawnable_blocks>
    
    - walk <npc>
      <def[locations].random.add[.5,0,-.5]>
      speed:<npc.flag[walk_speed]||.67>
      auto_range


Set Wander Location:
    type: task
    script:
    - flag npc
      curent_wander_location:<npc.location>

Arrived At Navigation Target:
    type: task
    script:
    - flag npc
      navigation_targets:!
    


################################################################################################
####################### Feed Back Sets #########################################################
################################################################################################



Npc Eat Effect:
    type: task
    definitions: item
    script:
    - define item_id
      <def[item].id>
      
    - define effect
      iconcrack_<def[item_id]>
      
    - repeat 5 {
        - playsound <npc.location> sound:EAT volume:10 pitch:0
        - playeffect <npc.location> effect:<def[effect]> qty:10
        - wait d@3t
        }
    

Npc Drink Effect:
    type: task
    definitions: item
    script:
    - define item_id <def[item].id>
    - define effect iconcrack_<def[item_id]>
    - repeat 5 {
        - playsound <npc.location> sound:DRINK volume:10 pitch:0
        - playeffect <npc.location> effect:<def[effect]> qty:10
        - wait d@3t
        }
    

################################################################################################
####################### Environment Changing Sets ##############################################
################################################################################################

Npc Break:
    #This is an denizen automated script
    type: task
    definitions: location
    script:
    - break <def[location]>
    #The npc should have a npc task execute for on break
    


################################################################################################
####################### Npc State Sets #########################################################
################################################################################################

Npc Engage:
    type: task
    definitions: time
    script:
    - engage <def[time]||d@10s>

Npc DisEngage:
    type: task
    script:
    - disengage
    

Npc Equip:
    #This requires that all arguments be filled out. If 1 is missing it will equip air
    #On the npc instead.
    type: task
    definitions: hand|head|chest|legs|boots
    script:
    - equip <npc>
      hand:<def[hand]||i@air>
      head:<def[head]||i@air>
      chest:<def[chest]||i@air>
      legs:<def[legs]||i@air>
      boots:<def[boots]||i@air>
    
Npc Equip Args:
    type: task
    definitions: args
    script:
    - equip <npc>
      <def[args].unescaped>

Npc Head:
    type: task
    definitions: skin
    script:
    - head <npc>
      skin:<def[skin]||<p@chemical_datas>>


Npc Rename:
    type: task
    definitions: name|npc
    script:
    - rename <def[npc]||<npc>>
      npc:<def[npc]>


Npc Change Skin:
    type: task
    definitions: skin_name
    script:
    - execute as_npc
      "npc select <npc.id>"
      
    - execute as_npc
      "npc skin <def[skin_name]||Chemical_Datas>"
    


NPC Despawn:
    type: procedure
    definitions: targets
    script:
    - define targets <def[targets].unescaped.as_list||<npc>>
    - despawn <def[targets]>
    - determine <def[targets]>
    

NPC Remove:
    type: procedure
    script:
    - if <npc.is_spawned> remove <npc>


################################################################################################
####################### Npc Magic Spells Set ###################################################
################################################################################################

Spell:
    type: task
    definitions: spell|args
    script:
    - execute as_npc 
      "cast <def[spell]> <def[args].unescaped||>"








################################################################################################
####################### Listen Sets ############################################################
################################################################################################

#todo: Finish me. Needs a script framework to call when finished. This will make things easier to add to the npc queue. 
#although it'd be neat to make npcs jump when another npc is killed.


#With this it might be a good idea for npcs to create events. Events that alter the town little by little.
#Also you could increase a npcs proximity entry and exit radius so that the npc listens to the player events. At night blacksmithing
#makes noise so if the player triggers an listened event the npc wakes up. Good for security, guards, sleeping npcs.
#This also would be useful for custom event handling that's coming out in a few days.




"Listen":
    #command: determines what to do with a listener
    #   new: you generally don't enter 'new'. You skip it and go strait for the type of listener
    #   cancel
    #   finish
    #
    #type: is the type of listener to implement
    #   kill
    #   block
    #   item
    #   drop
    #   travel
    #
    #requirement: is the amount 
    type: task
    definitions: command|type|requirement|script|id
    script:
    - if %script% == null {
        - define script ""
        } else {
        - define script "script:%script%"
        }
        
    - if %id% == null {
        - define id ""
        } else {
        - define id "id:%id%"
        }
    
    - define requirements "<def[requirements]||>"
    - define type "<def[type]||>"
    
    
    - if %command% == new define command ""
    - if %command% == cancel define command "cancel"
    - if %command% == finish define command "finish"
    
    - listen <def[command]> <def[type]> <def[requirements]> <def[script]> id:<def[id]>












################################################################################################
####################### Interact Sets ##########################################################
################################################################################################

Entity Get Target Entity:
    # Returns an entity from an  entitys point of view. Generally for interaction.
    type: procedure
    definitions: entity|distance
    script:
    - define distance <def[distance]||5>
    - foreach <def[entity].location.find.entities.within[<def[distance]>]> {
        - if <def[entity].location.facing[<def[value]>].degrees[2]> {
            - if <def[entity].can_see[<def[value]>]> {
                - look <def[entity]> <def[value].location>
                - define target <def[value]>
                }
            }
        }
    - determine <def[target]||none>

Npc Inter React:
    #Based on what the npc is looking at
    # Creates a world event in which whatever should be listening to.

    #todo: Add furnace changing to this
    #todo: Move the definitions of the items out of the script into a configurable container
    #todo: Create an listen
    type: task
    script:
    - define target "<proc[Entity Get Target Entity].context[<npc>]>"
    - if <def[target]> == none {
        - define target <npc.location.cursor_on[5]>
        - action "Interact" context:type|BLOCK|location|<def[target]>
        } else {
        - action "Interact" context:type|ENTITY|entity|<def[target]>
        }
    




################################################################################################
####################### World Sets #############################################################
################################################################################################

Drop:
    type: task
    definitions: entity_type|location|qty|speed
    script:
    - drop <def[entity_type]>
      <def[location]>
      qty:<def[qty]||1>
      speed:<def[speed]||1>




################################################################################################
####################### Delay Sets #############################################################
################################################################################################





