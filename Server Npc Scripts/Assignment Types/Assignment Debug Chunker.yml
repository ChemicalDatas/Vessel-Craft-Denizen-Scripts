




chunker_assignment:
    type: assignment
    
    #Npc Setup
    #the first arg is a procedure that returns a bool
    #The 2nd arg is the args that go into the procedure
    #The 3rd arg is the script to run if it returns true
    define general tactic:
    - flag npc
      tactics.living:!
    
    - flag npc
      "tactics.living:->:li@is_thirsty|60|drink something"
    
    - flag npc
      "tactics.living:->:li@is_hungry|10|eat something"
    
    #- flag npc
    #  "tactics.living:->:li@is_fatigued|60|sit nearby"
    
    #- flag npc
    #  "tactics.living:->:li@is_tired|80|sleep nearby"
    
    - flag npc
      "tactics.living:->:Tactics_Else|true|wander nearby"
    
    
    
    #Gets the task based on the npc state
    Npc Tactics Executor:
    # Get the tactics branch
    - define npc
      <npc||<player.selected_npc>>
    
    - define tactic_type
      <def[npc].flag[npc_state]>
    
    - define flag
      tactics.<def[tactic_type]>
    
    #todo: Raise an error for the npc owner to create a tactics branch
    - if !<def[npc].has_flag[%flag%]> {
        - announce "Npc did not have the Tactics branch: <def[tactic_type]>"
        - queue clear
        }
    
    #loop though the conditions
    #   if the condition passes execute code
    - define size
      <def[npc].flag[tactics.<def[tactic_type]>].as_list.size>
    
    - define next_tactic
      "No Tactic Available"
    
    - repeat <def[size]> {
        - define tactics <def[npc].flag[tactics.<def[tactic_type]>].as_list.get[<def[value]>]>
        - define condition <def[tactics].as_list.get[first]>
        - define args <def[tactics].as_list.get[2]>
        
        - define condition_output <proc[<def[condition]>].context[<def[args].unescaped>]||Invalid_Procedure>
        
        - if <def[condition_output]> == Invalid_Procedure announce "Checking condition for <def[condition]>: <&nl>Parsed to Invalid Procedure."
        - if <def[condition_output]>
          define next_tactic
          <def[tactics].as_list.get[3]>
    
    
    
    - if <def[next_tactic]> == "No Tactic Available"
      action "Empty tactics Execution" 
      context:type|<def[tactic_type]>
      else
      run <def[next_tactic]>
      id:<npc.id>_action_queue
    
    
    
    actions:
        on assignment:
        - flag npc npc_state:living
        - inject locally "define general tactic"
        - announce "Finished setting up npc. Starting the Tactics Executor."
        - run "Npc Tactics Executor"
        
        
        on complete navigation:
        - run "Npc Tactics Executor"
        
        on cancel navigation:
        - run "Npc Tactics Executor"
        
        on stuck:
        - announce "Npc: <npc.name> is stuck"
        - teleport <npc> <npc.location.add[.5,0,-.5]>
        - run "Npc Tactics Executor" delay:d@1s
        - determine none


        on spawn:
        - announce "Npc: <npc.name> spawned and will start executing its tasks"
        - run "Npc Task Execute" delay:<npc.constant[delay]> id:<npc.id>_scheduled_queue
        
        on no task execute:
        # Schedule a npcs tactic scheduler
        # Set the npc to wandering tactics
        #- flag npc npc_state:Wandering
        #- run "Npc Tactics Executor"
        
        #- announce "Npc had no task to execute"
        #- run "Add Task" "def:s@Wander Nearby"
        #- run "Npc Task Execute" delay:<npc.constant[delay]> id:<npc.id>_scheduled_queue
        
        
        
        on empty tactics execution:
        #When the npc's selected tactic has no solution for their current state.
        - announce "The tactic: <context.type> failed to produce any instruction for the npc to perform."
        
        on enter proximity:
        - run "Show Npc Task Queue"
        - run "Show Npc Task Status"
        






