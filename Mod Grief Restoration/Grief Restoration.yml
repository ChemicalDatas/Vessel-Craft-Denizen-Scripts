#First step into creating a mod that replaces blocks
# A form of griefprevention that allows players to grief but restores the griefed items
# 

Block Healing Listener:
    type: world
    database_path: script_database\griefed_blocks.yml
    database_id: griefed_blocks
    restore_delay: d@1m
    recursion_limit: 20
    dump_breakable_delay: d@10s
    
    
    #because this will auto load chunks and reset the breakables back
    load_write_save_delay: d@1s
    auto_restore_on_start_delay: d@1m
    #what material to replace with when restored
    replaceables:
        m@stone_brick:
        - m@cracked_stone_brick
        m@cracked_stone_brick:
        - m@cobblestone
        m@stone:
        - m@cobblestone
        m@cobblestone:
        - m@gravel
        m@gravel:
        - m@air
        m@grass:
        - m@dirt
        m@tnt:
        - m@air
    breakable_list:
    - m@glass
    - m@white_stained_glass
    - m@oarnge_stained_glass
    - m@magenta_stained_glass
    - m@light_blue_stained_glass
    - m@yellow_stained_glass
    - m@lime_stained_glass
    - m@pink_stained_glass
    - m@gray_stained_glass
    - m@light_gray_stained_glass
    - m@cyan_stained_glass
    - m@purple_stained_glass
    - m@blue_stained_glass
    - m@brown_stained_glass
    - m@green_stained_glass
    - m@red_stained_glass
    - m@black_stained_glass
    - m@glass_pane
    - m@white_stained_glass_pane
    - m@orange_stained_glass_pane
    - m@magenta_stained_glass_pane
    - m@light_blue_stained_glass_pane
    - m@yellow_stained_glass_pane
    - m@lime_stained_glass_pane
    - m@pink_stained_glass_pane
    - m@gray_stained_glass_pane
    - m@light_gray_stained_glass_pane
    - m@cyan_stained_glass_pane
    - m@purple_stained_glass_pane
    - m@blue_stained_glass_pane
    - m@brown_stained_glass_pane
    - m@green_stained_glass_pane
    - m@red_stained_glass_pane
    - m@black_stained_glass_pane
    - m@ice
    - m@packed_ice
    - m@glowstone
    - m@sea_lantern
    
    
    events:
        on request breakable hardsave:
        - define queue_id request_breakable_save
        
        - if !<queue.exists[<def[queue_id]>]>
          run "Yaml Save"
          def:<script.yaml_key[database_path]>|<script.yaml_key[database_id]>
          id:<def[queue_id]>
          delay:<script.yaml_key[dump_breakable_delay]>
        
        
        on server start:
        - run "Yaml Load"
          def:<script.yaml_key[database_path]>|<script.yaml_key[database_id]>
        
        
        - run "Auto breakable Restore"
          def:<script.yaml_key[database_id]>|<script.yaml_key[load_write_save_delay]>
          delay:<script.yaml_key[auto_restore_on_start_delay]>
        
        
        on stop command:
        #- determine passively fulfilled
        - run "Yaml Save"
          def:<script.yaml_key[database_path]>|<script.yaml_key[database_id]>
        
        
        on entity explodes:
        - define locations
          <context.blocks>
        
        - define path
          exploded_block_sets.<util.random.duuid>
        
        - define yaml_id
          <script.yaml_key[database_id]>
        
        - define delay
          <script.yaml_key[restore_delay]>
        
        - run "Save breakable"
          def:<def[yaml_id]>|<def[locations].escaped>|<def[path]>
          instantly
        
        - run "Restore breakable"
          def:<def[yaml_id]>|<def[path]>
          delay:<def[delay]>
        
        
        #on entity explosion primes:
        #- announce "Entity explosion primes?"
        
        
        on block burns:
        - define location
          li@<context.location>
        
        - define path
          burned_block_sets.<util.random.duuid>
        
        - define yaml_id
          <script.yaml_key[database_id]>
        
        - define delay
          <script.yaml_key[restore_delay]>
        
        - run "Save breakable"
          def:<def[yaml_id]>|<def[location].escaped>|<def[path]>
          instantly
        
        - run "Restore breakable"
          def:<def[yaml_id]>|<def[path]>
          delay:<def[delay]>
        
        
        on player stops sprinting:
        - define locations li@<player.location.above>
        
        - inject locally
          path:shatter_then_replace
        
        - hurt 2
        
        
        on entity damaged by fall:
        - define locations
          <context.entity.location.below>
        
        - inject locally
          path:shatter_then_replace
        
        - determine cancelled
        
        
        #this event is bugged as denizen returns some block thats 5 blocks away from the actual block hit...
        on projectile hits block:
        - define target_offsets li@0,0,0|1,0,0|-1,0,0|0,1,0|0,-1,0|0,0,1|0,0,-1
        
        - define locations
          li@
        
        - define origin
          <context.location>
        
        #- playeffect <def[origin]> effect:ender_signal qty:2
        #- showfake <def[origin]> m@glowstone
        
        - foreach <def[target_offsets]> {
            - define locations <def[locations].include[<def[origin].add[<def[value]>]>]>
            #- narrate "local materials<&co> <def[origin].add[<def[value]>].material>"
            }
        
        - inject locally
          path:shatter_then_replace
        
    
    shatter_then_replace:
    - define materials
      <script.yaml_key[breakable_list].as_list>
    
    - define path
      broken_block_sets.<util.random.duuid>
    
    - define recur_limit
      <script.yaml_key[recursion_limit]>
    
    - define target_blocks
      "<proc[Build Connected Block List].context[<def[locations].escaped>|<def[materials].escaped>|<def[recur_limit]>]>"
    
    - if <def[target_blocks].is_empty> {
        #- narrate "target blocks were empty!"
        - queue clear
        }
    
    - define yaml_id
      <script.yaml_key[database_id]>
    
    - define delay
      <script.yaml_key[restore_delay]>
    
    
    - run "Save breakable" def:<def[yaml_id]>|<def[target_blocks].escaped>|<def[path]>
    
    - run "Break breakable" def:<def[target_blocks].escaped>
    
    - run "Restore breakable" def:<def[yaml_id]>|<def[path]> delay:<def[delay]>
    
Break breakable:
    type: task
    definitions: block_list
    type_block_list: as_list
    script:
    - define block_list <def[block_list].unescaped>
    #- inject typechecking
    - foreach <def[block_list]> {
        - playsound <def[value]> sound:breakable
        - playeffect <def[value]> effect:iconcrack_<def[value].material.id> qty:5
        }
    
    - modifyblock <def[block_list]>
      m@air
      delayed
    
    
#after mcmonkey fixes tasks bieng able to determine then get a determination from a queue
#replace the need for providing a path
Save breakable:
    type: task
    definitions: yaml_id|locations|path
    script:
    - define locations <def[locations].unescaped>
    - define locations_materials <def[locations].parse[material]>
    
    - if !<def[path].exists>
        || <def[path]>      == ""
        || <def[path]>      == null {
        - announce "<script.name> Failed to provide a path <def[path]>" to_console
        - queue clear
        }
    #- define path
    #  broken_block_sets.<util.random.duuid>
    
    #List of locations that were modified
    - yaml id:<def[yaml_id]>
      set
      <def[path]>.locations:|:<def[locations]>
    
    #List of materials that corespond indexwise to the locations that were modified
    - yaml id:<def[yaml_id]>
      set
      <def[path]>.materials:|:<def[locations_materials]>
    
    - event "Request Breakable HardSave"
    
    
Restore breakable:
    #
    # Task id is the task that generated the path id for this script
    # Get the determination from the task id to get 
    type: task
    definitions: yaml_id|path|task_id
    script:
    - if !<yaml.list.contains[<def[yaml_id]>]> {
        - announce "<script.name> will not load a yaml_id thats not loaded. ID<&co> <def[yaml_id]||>" to_console
        - queue clear
        }
    
    #get a definition from the task id called path
    #This contains queue.definition[def] code thats currently bugged out through the api
    - define path
      <def[path]||<def[task_id].definition[path]>>
    
    #Its possible that another script... (debugging) erased the yaml path for these... like if a restart
    # was initiated and this script was still active in memory.
    - if !<yaml[<def[yaml_id]>].contains[<def[path]>]> {
        - announce "<script.name> could not find the path in <def[yaml_id]>. PATH<&co> <def[path]||>" to_console
        - if !<yaml[<def[yaml_id]>].contains[<def[path]>.materials]> {
            - announce "<script.name> could not find the path for the materials. PATH<&co> <def[path]||<&lb>PATH<&rb>>.materials" to_console
            }
        - queue clear
        }
    
    - define location_list
      <yaml[<def[yaml_id]>].read[<def[path]>.locations]>
    
    - define material_list
      <yaml[<def[yaml_id]>].read[<def[path]>.materials]>
    
    #- announce
    #  "<script.name> Restoring Broken Blocks. Set ID<&co> <def[yaml_id]> <def[path]>"
    #  to_console
    
    #- announce "<script.name> location list<&co> <def[location_list]>"
    
    - define loaded_chunks
      li@
    
    #Need a foreach because modifyblock dose not handle materials lists in order
    - foreach <def[location_list]> {
        - define target_chunk <def[value].get_chunk>
        - if !<def[target_chunk].is_loaded> {
            - adjust <def[target_chunk]> load
            - define loaded_chunks <def[loaded_chunks].include[<def[target_chunk]>]>
            - wait <def[delay]>
            }
        - modifyblock <def[value]> <def[material_list].get[<def[loop_index]>]>
        }
    
    - adjust <def[loaded_chunks]> unload_safely
    #resets all sub-nodes as well
    - yaml id:<def[yaml_id]> set <def[path]>:!

Auto breakable Restore:
    type: task
    definitions: yaml_id|write_delay
    script:
    - if <def[yaml_id]||none> == none
      || !<yaml.list.contains[<def[yaml_id]||none>]> {
        - announce "<script.name><&co> Did not recieve any valid yaml_id<&co> <def[yaml_id]||NO YAML_ID PASSED>" to_console
        - queue clear
        }
    
    - define yaml_path_list
      <yaml[<def[yaml_id]>].list_keys[broken_block_sets]||li@>
    
    - if <def[yaml_path_list].is_empty> {
        - announce "<script.name> There was no path in the yaml <def[yaml_id]> because its empty. The tag failed anyways." to_console
        - queue clear
        }
    
    - define delay
      <def[write_delay]||d@1s>
    
    - define loaded_chunks
      li@
    
    - foreach <def[yaml_path_list]> {
        - define path broken_block_sets.<def[value]>
        
        - define location_list <yaml[<def[yaml_id]>].read[<def[path]>.locations]>
        
        - define material_list <yaml[<def[yaml_id]>].read[<def[path]>.materials]>
        
        - foreach <def[location_list]> {
            - define target_chunk <def[value].get_chunk>
            - if !<def[target_chunk].is_loaded> {
                - adjust <def[target_chunk]> load
                - define loaded_chunks <def[loaded_chunks].include[<def[target_chunk]>]>
                - wait <def[delay]>
                }
            - modifyblock <def[value]> <def[material_list].get[<def[loop_index]>]>
            }
        
        - wait <def[delay]>
        - adjust <def[loaded_chunks]> unload_safely
        - yaml id:<def[yaml_id]> set <def[path]>:!
        }
    
    - announce "<script.name> Finished restoring the previously broken glass from the .yml file." to_console
    - event "Request Breakable HardSave"
    
