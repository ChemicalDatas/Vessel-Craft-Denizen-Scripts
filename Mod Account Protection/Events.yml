On Join Player Management:
    type: world
    password_token_lifetime: d@1h
    mod_title: <blue>[Scripted Account Secure]<reset>
    password_required_permission: AccountProtection.PasswordRequired
    login_every_time_permission: AccountProtection.LoginEveryTime
    script_cooldown: 1s
    events:
        on server start:
        - if <server.list_scripts.contains[<script>]>
          announce "<script.yaml_keys[mod_title]> is actively protecting player accounts!" to_console
          else
          announce "<script.yaml_keys[mod_title]> failed to load <script>... If the server script list does not contain this, this will not run...." to_console
        
        
        on player joins:
        - wait d@1s
        - adjust <player> gamemode:adventure
        - define location <player.bed_spawn||<player.world.spawn_location>>
        - define location_arround "<proc[Cube Surrounding Location].context[<def[location]>|3]>"
        - teleport <player> <def[location_arround].get_spawnable_blocks.random>
        - if <player.has_permission[<script.yaml_keys[login_every_time_permission]>]>
          flag player AccountProtection.EnteredPassword:!
        
        on player toggles flight:
        - inject locally "path:eligible for password protection"
        - inject locally "path:action password check"
        
        on player uses portal:
        - inject locally "path:eligible for password protection"
        - inject locally "path:action password check"
        
        on player steps on block:
        - if <script.cooldown[<player>].is[!=].to[d@0t]>
          queue clear
        - inject locally "path:eligible for password protection"
        - inject locally "path:action password check"
        
        on player jumps:
        - if <script.cooldown[<player>].is[!=].to[d@0t]>
          queue clear
        - inject locally "path:eligible for password protection"
        - inject locally "path:action password check"
        
        on command:
        - if <context.server>
          queue clear
        - inject locally "path:eligible for password protection"
        - inject locally "path:command password check"
        
        
        on login command:
        - determine passively fulfilled
        - if <player.has_flag[AccountProtection.EnteredPassword]> {
            - narrate "<script.yaml_keys[mod_title]> <green>You<&sq>ve already entered your password."
            - queue clear
            }
        - if <player.flag[AccountProtection.Password]> != <context.args.escaped> {
            - narrate "<script.yaml_keys[mod_title]> <red>Incorrect Password for <player.name.display||<player.name>>"
            - queue clear
            }
        - narrate "<script.yaml_keys[mod_title]> Welcome back <yellow><player.name>"
        - flag player AccountProtection.EnteredPassword:true duration:<script.yaml_keys[password_token_lifetime]>
        
        on setpass command:
        - determine passively fulfilled
        - define args <context.args.escaped>
        - flag <player> AccountProtection.Password:<def[args]>
        - narrate "<script.yaml_keys[mod_title]> <blue>You've set your password to <def[args].space_separated> <player.name.display||<player.name>>"
    
    
    
    #Allows script to continue if theres no protections involved.
    eligible for password protection:
    - cooldown <script.yaml_keys[script_cooldown]> s:<script>
    - if <player.has_flag[AccountProtection.EnteredPassword]>
      queue clear
    
    - if !<player.has_permission[<script.yaml_keys[password_required_permission]>]>
      queue clear
    
    
    
    #Allows script to continue if theres no protections involved.
    command password check:
    - if !<player.has_flag[AccountProtection.Password]> {
        - narrate "<script.yaml_keys[mod_title]>
          <gray>Youll need to set your password with <blue>./setpass <red>(Your password)"
        - determine fulfilled
        }
    - if !<player.has_flag[AccountProtection.EnteredPassword]> {
        - narrate "<script.yaml_keys[mod_title]> <red>You need to enter your <red>PASSWORD."
        - narrate "<blue>./login (password)"
        - determine fulfilled
        }


    #Allows script to continue if theres no protections involved.
    action password check:
    - cooldown <script.yaml_keys[script_cooldown]> s:<script.name>
    - if !<player.has_flag[AccountProtection.Password]> {
        - narrate "<script.yaml_keys[mod_title]>
          <gray>Youll need to set your password with <blue>./setpass <red>(Your password)"
        - teleport <player> <player.bed_spawn||<player.world.spawn_location>>
        }
    - if !<player.has_flag[AccountProtection.EnteredPassword]> {
        - narrate "<script.yaml_keys[mod_title]> <red>You need to enter your <red>PASSWORD."
        - narrate "<blue>./login (password)"
        - teleport <player> <player.bed_spawn||<player.world.spawn_location>>
        }





