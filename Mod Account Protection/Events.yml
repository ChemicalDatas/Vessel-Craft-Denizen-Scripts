On Join Player Account Management:
    type: world
    password_token_lifetime: d@6h
    mod_title: <gray>[Scripted Account Secure]<reset>
    password_required_permission: AccountProtection.PasswordRequired
    login_every_time_permission: AccountProtection.LoginEveryTime
    script_cooldown: d@1s
    events:
        on server start:
        - announce "<parse:<parse:<script.yaml_key[mod_title]>>> is actively protecting player accounts!" to_console
        
        on player joins:
        - inject "wait for valid player"
        # Ops and * permission users will always have the permission
        # This is a way to not even check
        - if <player.has_flag[ignore_login_every_time]> queue clear
        - if <player.has_permission[<script.yaml_key[login_every_time_permission]>]>
          flag player AccountProtection.EnteredPassword:!
        
        on player toggles flight:
        - cooldown <script.yaml_key[script_cooldown]> s:<script>
        - inject locally "path:dont continue if achieved permission"
        - inject locally "path:action password determination"
        
        on player uses portal:
        - cooldown <script.yaml_key[script_cooldown]> s:<script>
        - inject locally "path:dont continue if achieved permission"
        - inject locally "path:action password determination"
        
        on player steps on block:
        - inject locally "path:dont continue if script is not cooled down"
        - cooldown <script.yaml_key[script_cooldown]> s:<script>
        - inject locally "path:dont continue if achieved permission"
        - inject locally "path:action password determination"
        
        on player jumps:
        - inject locally "path:dont continue if script is not cooled down"
        - cooldown <script.yaml_key[script_cooldown]> s:<script>
        - inject locally "path:dont continue if achieved permission"
        - inject locally "path:action password determination"
        
        on command:
        - if <context.server> queue clear
        - cooldown <script.yaml_key[script_cooldown]> s:<script>
        - inject locally "path:dont continue if achieved permission"
        - inject locally "path:command password determination"
        
        # todo: Create a separate script for the command
        on login command:
        - determine passively fulfilled
        - if <player.has_flag[AccountProtection.EnteredPassword]> {
            - narrate "<parse:<script.yaml_key[mod_title]>> <green>You<&sq>ve already entered your password."
            - queue clear
            }
        - if <player.flag[AccountProtection.Password]||no_password> != <context.args.escaped> {
            - narrate "<parse:<script.yaml_key[mod_title]>> <red>Incorrect Password for <player.name.display||<player.name>>"
            - queue clear
            }
        - narrate "<parse:<script.yaml_key[mod_title]>> Welcome back <yellow><player.name>"
        - if <player.has_permission[<script.yaml_key[login_every_time_permission]>]> {
            - if <player.has_flag[ignore_login_every_time]> {
                - narrate "<parse:<script.yaml_key[mod_title]>> Want to login each time?<&nl>
                            ./ex flag <&lt>player<&gt> ignore_login_every_time:!"
                } else {
                - narrate "<parse:<script.yaml_key[mod_title]>><&nl>
                            If you tire of logging in each time do<&nl>
                            ./ex flag <&lt>player<&gt> ignore_login_every_time<&nl>
                            <yellow>That will allow you to ignore the permission check.<&nl>
                            <red>Applies to * perm groups and ops."
                }
            }
        - flag player AccountProtection.EnteredPassword:true duration:<script.yaml_key[password_token_lifetime]>
        
        # todo: Create a separate script for the command
        on setpass command:
        - determine passively fulfilled
        - if <context.args.is_empty> {
            - narrate "<parse:<script.yaml_key[mod_title]>> You didnt enter anything. You need to enter some password."
            - queue clear
            }
        - define args <context.args>
        - flag <player> AccountProtection.Password:<def[args].escaped>
        - narrate "<parse:<script.yaml_key[mod_title]>> <blue>You've set your password to <gold><&sq><def[args].space_separated||<def[args]>><&sq> <green><player.name.display||<player.name>>"
    
    dont continue if script is not cooled down:
    - if <script.cooldown[<player>].is[!=].to[d@0t]> queue clear
    
    #Allows script to continue if theres no protections involved.
    dont continue if achieved permission:
    - if <player.has_flag[AccountProtection.EnteredPassword]> queue clear
    - if !<player.has_permission[<script.yaml_key[password_required_permission]>]> queue clear
    
    
    #Allows script to continue if theres no protections involved.
    command password determination:
    # Player has not set a password
    - if !<player.has_flag[AccountProtection.Password]> {
        - narrate "<parse:<script.yaml_key[mod_title]>>
          <gray>Youll need to set your password with <blue>./setpass <red>(Your password)"
        - determine fulfilled
        }
    # ./login (password) if its correct, it sets a flag on the player for success
    # This checks if thats a success if not tells bukkit that the command has been handled completly, not allowing 
    # other commands to proceed.
    - if !<player.has_flag[AccountProtection.EnteredPassword]> {
        - narrate "<parse:<script.yaml_key[mod_title]>> <red>You need to enter your <red>PASSWORD."
        - narrate "<blue>./login (password)"
        - determine fulfilled
        }


    #Allows script to continue if theres no protections involved.
    action password determination:
    - define loc  <player.bed_spawn.center.add[0,2,0]||<player.world.spawn_location.above>>
    - cooldown <script.yaml_key[script_cooldown]> s:<script.name>
    - if !<player.has_flag[AccountProtection.Password]> {
        - narrate "<parse:<script.yaml_key[mod_title]>>
          <gray>Youll need to set your password with <blue>./setpass <red>(Your password)"
        - teleport <player> <def[location]>
        }
    - if !<player.has_flag[AccountProtection.EnteredPassword]> {
        - narrate "<parse:<script.yaml_key[mod_title]>> <red>You need to enter your <red>PASSWORD."
        - narrate "<blue>./login (password)"
        - teleport <player> <def[location]>
        }





