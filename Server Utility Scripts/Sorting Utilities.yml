#A set of sorting utilities for sorting...

"Sort_Test":
    #############################################################################################################################
    #                                                                                                                           #
    #                                                                                                                           #
    #############################################################################################################################
    type: task
    script:
    - define blocks "<<player.location.cursor_on[20]>.find.blocks[1].within[2]>"
    - define block_list ''
    - inject "Quicksort by Distance" "def:block_list|<escape:<def[blocks]>>|<player.location>"
    
    #This should be in ascending order.
    - foreach <def[block_list]> {
        - narrate <def[value].distance[<def[location]>]>
        }
    

"Quicksort by Distance":
    #############################################################################################################################
    #                                                                                                                           #
    # Dose not work by reason of variable passing between queues.                                                               #
    # Inject dose not take definitions. It alters ones already made.                                                            #
    #                                                                                                                           #
    #############################################################################################################################
    type: task
    definitions: variable_name|location_list|location
    script:
    - announce "var_name: <def[variable_name]>"
    - announce "location: <def[location]>"
    - announce "location list: <def[location_list].unescaped>"
    
    - if <def[location_list].size> >= 1 
        - define new_list <util.random.duuid>
        - define location_list <def[location_list].unescaped>
        - define pivot <util.random.int[0].to[<def[location_list].size>]>
        
        - foreach <def[location_list]> {
            - define distance <<def[value]>.distance[<def[location]>]>
            - if <def[distance]> >= <def[pivot]> {
                - define <def[new_list]>_lower '<proc[List Append Right].context[<def[new_list_lower]>|<def[value]>]>'
                } else {
                - define <def[new_list]>_upper '<proc[List Append Right].context[<def[new_list_upper]>|<def[value]>]>'
                }
            }
        - inject "Quicksort by Distance Task" def:<def[new_list]>_lower|<def[new_list_lower]>|<def[location]>
        - inject "Quicksort by Distance Task" def:<def[new_list]>_upper|<def[new_list_upper]>|<def[location]>
        - define <def[variable_name]> "<def[new_list_lower]>|<def[new_list_upper]>"
        }


"Quicksort by Distance v2":
    #############################################################################################################################
    #                                                                                                                           #
    #                                                                                                                           #
    #############################################################################################################################
    type: task
    definitions: var_name|location_list|location
    script:
    - if <<def[location_list]>.size> >= 1 
        - define location_list <unescape:<def[location_list]>>
        - define pivot <util.random.int[0].to[<<def[location_list]>.size>]>
        - foreach <def[location_list]> {
        - define distance <<def[value]>.distance[<def[location]>]>
            - if <def[distance]> >= <def[pivot]> {
                - define new_list_lower '<proc[List Append Right].context[<def[new_list_lower]>|<def[value]>]>'
                } else {
                - define new_list_upper '<proc[List Append Right].context[<def[new_list_upper]>|<def[value]>]>'
                }
            }
        - define new_variable_name <util.random.duuid>
        - define <def[new_variable_name]>_lower <def[new_list_lower]>
        - define <def[new_variable_name]>_upper <def[new_list_upper]>
        - inject "Quicksort by Distance Task v2" def:<def[new_list]>_lower|<escape:<def[new_list_lower]>>|<def[location]>
        - inject "Quicksort by Distance Task v2" def:<def[new_list]>_upper|<escape:<def[new_list_upper]>>|<def[location]>
        - define <def[variable_name]> "<def[<def[new_list]>_lower]>|<def[new_list_upper]>"
        }





"Quicksort by Distance v3":
    #############################################################################################################################
    #                                                                                                                           #
    # var_name|location_list|location                                                                                           #
    #                                                                                                                           #
    #############################################################################################################################
    type: task
    script:
    - define location_list <unescape:<def[location_list]>>
    - if <def[location_list].size> >= 1 
        - define pivot <util.random.int[0].to[<<def[location_list]>.size>]>
        - foreach <def[location_list]> {
        - define distance <<def[value]>.distance[<def[location]>]>
            - if <def[distance]> >= <def[pivot]> {
                - define new_list_lower '<proc[List Append Right].context[<def[new_list_lower]>|<def[value]>]>'
                } else {
                - define new_list_upper '<proc[List Append Right].context[<def[new_list_upper]>|<def[value]>]>'
                }
            }
        - define new_variable_name <util.random.duuid>
        - define <def[new_variable_name]>_lower <def[new_list_lower]>
        - define <def[new_variable_name]>_upper <def[new_list_upper]>
        - inject "Quicksort by Distance Task v2" def:<def[new_list]>_lower|<def[new_list_lower]>|<def[location]>
        - inject "Quicksort by Distance Task v2" def:<def[new_list]>_upper|<def[new_list_upper]>|<def[location]>
        - define <def[variable_name]> "<def[<def[new_list]>_lower]>|<def[new_list_upper]>"
        }
    




