#A set of scripts designed to replicate global namespace objects
#
#instead of define a new command called object?
#- object noob.intelligence ????
#


Object Database Startup:
    type: world
    path: script_database/object_database.yml
    events:
        on server start:
        - run "yaml load" def:<script.yaml_key[path]>|temp_objects
        
        # on server shutdown.
        on stop command:
        - announce "<script.name> performing shutdown routine."


#note: to avoid a obscure bugs, objects might need to have the queue id prefixed to the object_id
Object:
    #Has the ability to handle multiple dynamic inputs
    #This has a scope that extends beyond script, as its more of a global variable
    #Get returns a list wether its 1 or multiple requests
    #
    #  #set an attribute on red_team
    # - define kills <li@kills|10.escaped>
    # - define wins <li@wins|0.escaped>
    # - define none_or_setter <proc[object].context[red_team|set|<def[kills]>|<def[wins]>]>
    #
    #  #get kills and wins
    # - define team_stats <proc[object].context[red_team|get|kills|wins]>
    # - define team_red_wins <def[team_stats].get[1]>
    #
    #  #just get the wins from redteam
    # - define red_wins <proc[object].context[red_team|get|wins]>
    #
    #  #clears the object from memory
    # - define clear_red_ream <proc[object].context[red_team|clear]>
    #
    # #raises an error and returns li@
    # - define red_wins <proc[object].context[red_team|get|wins]>
    type: procedure
    definitions: yaml_id|object_id|method
    script:
    #- inject "Announce Arguments Passed"
    # todo: reformat the ignored values to include .starts_with[__]
    # todo: add a method called delete to remove the yaml object from memory right away instead of waiting for the server to restart.
    # todo: change the adding or getting attributes with a map_get if possible. A key: value option style
    # todo: replace the checks with - inject typecheck
    - define yaml_id <def[yaml_id]||temp_objects>
    - if !<yaml.list.contains[<def[yaml_id]>]> {
        - debug error "invalid yaml id<&co> <def[yaml_id]>"
        - queue clear
        }
    - if <def[object_id]||none> == none {
        - debug error "invalid object id<&co> <def[object_id]>"
        - queue clear
        }
    - if <def[method]||none> == none {
        - debug "Need an method refrence"
        - queue clear
        }
    - inject <def[method]> locally
    
    get:
    - if !<yaml[<def[yaml_id]>].contains[<def[object_id]>]> {
        - debug "Object<&co> <red><def[object_id]><reset> does not exist."
        - queue clear
        }
    - define ignored_values li@
    - define ignored_values <def[ignored_values].include[<script.yaml_key[definitions].as_list>]>
    - define ignored_values <def[ignored_values].include[li@attribute_list|loop_index|ignored_values|value]>
    - define attribute_list li@
    - foreach <queue.definitions> {
        - if <def[ignored_values].contains[<def[value]>]> foreach next
        - if !<yaml[<def[yaml_id]>].contains[<def[object_id]>.<def[%value%]>]> {
            #I choose to raise the error instead of returning none
            #This mimicks a global variable and there isnt anyway to remove it unless the server restarts.
            #
            - debug error "Object<&co> <red><def[object_id]><reset> dose not have attribute<&co> <red><def[%value%]>"
            - foreach next
            }
        # include the attribute and add it to the attribute_list as escaped data (it could be a list)
        #- announce "trying to find <def[%value%]>"
        - define attribute_list <def[attribute_list].include[<yaml[object_database].read[<def[object_id]>.<def[%value%]>].escaped>]>
        }
    #- announce "object contains<&co> <yaml[object_database].list_deep_keys[<def[object_id]>]>"
    - determine <def[attribute_list]>
    
    set:
    - define ignored_values li@
    - define ignored_values <def[ignored_values].include[<script.yaml_key[definitions].as_list>]>
    - define ignored_values <def[ignored_values].include[li@|loop_index|ignored_values|value]>
    - foreach <queue.definitions> {
        - if <def[ignored_values].contains[<def[value]>]> foreach next
        - define data <def[%value%].unescaped.as_list>
        - define attrib <def[data].get[1]||none>
        - define value <def[data].get[2]||none>
        - if <def[attrib]> == none || <def[value]> == none foreach_next
        #- announce "setting <def[attrib]> <def[value]>"
        - yaml id:<def[yaml_id]> set <def[object_id]>.<def[attrib]>:<def[value]>
        }
    #- if <yaml[object_database].contains[<def[object_id]>]> {
    #    - narrate "<green>Sucessfully created object. <def[object_id]> is ready."
    #    } else {
    #    - narrate "<red>Failed to create object. <def[object_id]> is not in the yaml memory."
    #    }
    - determine none
    
    clear:
    - if !<yaml[<def[yaml_id]>].contains[<def[object_id]>]> {
        - debug error "Object<&co> <red><def[object_id]><reset> does not exist."
        - queue clear
        }
    - yaml id:<def[yaml_id]> set <def[object_id]>:!
    - determine none
    
    attributes:
    - if !<yaml[<def[yaml_id]>].contains[<def[object_id]>]> {
        - debug error "Object<&co> <red><def[object_id]><reset> does not exist."
        - queue clear
        }
    - determine <yaml[<def[yaml_id]>].list_deep_keys[<def[object_id]>]>
    


object events:
    type: world
    events:
        dobject request channel:
        - define object <context.object>
        - define channel_name object_communication_channel.<def[object]>
        - flag server <def[channel_name]>
        - determine <context.object>
        dobject closes channel:
        - define object <context.object>
        - define channel_name object_communication_channel.<def[object]>
        - flag server <def[channel_name]>:!
        - determine Success



queue definitions event:
    # Composes all definitions of a queue into an event in the form of <context.(definition_name)>
    # Must Specify an queue to get from and an event name to fire under.
    type: task
    definitions: event_list|queue
    type_queue: as_queue
    type_event_list: as_list
    script:
    - inject typecheck
    - define context_data li@
    - define queue <def[queue].as_queue>
    - foreach <def[queue].definitions> {
        - define data "<def[value]>|<def[queue].definition[<def[value]>].escape>"
        - define context_data <def[context].include[<def[data]>]>
        }
    - event <def[event_list].unescaped> <def[context_data]>


queue definitions action:
    # Composes all definitions of a queue into an action in the form of <context.(definition_name)>
    # Must Specify an queue to get from and an event name to fire under, as also have an attached npc.
    type: task
    definitions: event_list|queue
    type_queue: as_queue
    type_event_list: as_list
    script:
    - inject typecheck
    - define context_data li@
    - define queue <def[queue].as_queue>
    - foreach <def[queue].definitions> {
        - define data "<def[value]>|<def[queue].definition[<def[value]>].escape>"
        - define context_data <def[context].include[<def[data]>]>
        }
    - action <def[event_list].unescaped> <def[queue].npc> <def[context_data]>






# an running queue that represents an object, persistance related to internal definitions
# interacted with by utility scripts in an service interface manner
dobject:
    # there isnt any adding definitions to this task after created unless...
    # a way for this queue to inject scripts to manipulate
    # the init_script is required to start the body_script,
    #
    #
    type: task
    definitions: enter_exit_script|body_script
    type_enter_exit_script: as_script
    type_body_script: as_script
    script:
    - inject typecheck
    - inject <def[enter_exit_script]>

dobject_enter_exit:
    type: task
    script:
    - define flag communication_channel_<queue.id>
    - event "dobject request channel" context:object|<queue> save:channel
    - define __communication_channel <entry[channel].determinations.first>
    - inject <def[body_script]>
    - event "dobject closes channel" context:object|<queue>
    

dobject_body:
    type: task
    script:
    - while true {
        - inject <server.flag[<def[flag]>].first>
        - flag server <def[flag]>:!
        - flag server <def[flag]>:|:<server.flag[<def[flag]>].get[2].to[<server.flag[<def[flag]>].size>]>
        - queue pause
        }


queue_get:
    # Retrieve definitions directly from a running queue
    type: procedure
    definitions: queue|definition
    type_queue: as_queue
    script:
    - inject typecheck
    - announce "<script.name> queue<&co> <def[queue]> <def[definition]>"
    - define retrieved_values <def[queue].as_queue.definition[<def[definition]>]>
    - determine <def[retrieved_values]>


queue_set:
    # sends a task through the message queue for the object to process
    # the message should be a single line, map_get format, s@injectionDefine_script/variables to define 
    type: task
    definitions: queue|attribute|value
    queue_type: as_queue
    script:
    - inject typecheck 
    - if !<queue.exists[<def[queue]>]> {
        - debug error "queue <def[queue]> dose not exist!"
        - queue clear
        }


plog:
    type: task
    definitions: head|body
    script:
    - if <def[body].is[==].to[true]> {
        - define head <def[head]>
        }

query:
    type: procedure
    definitions: facts|query
    script:
    - define truth_list li@
    - foreach <def[facts].unescaped||li@> {
        - if <def[value].contains[<def[query]>]> {
            - define <def[truth_list].include[<def[value]>]>
            }
        }
    - determine <def[truth_list]>

# get a query from
rdefine:
    type: task
    definitions: 


tqueue:
    type: task
    definitions: p1|p2
    script:
    - announce "<script.name> <queue.id> definitions<&co> <def[p1]> <def[p2]>"
    - queue pause
    - announce "finishing <script.name>"

tqueue2:
    type: task
    definitions: p3
    script:
    - foreach <queue.definitions> {
        - announce "definitions in queue<&co> <queue.id> %value% <def[%value%]>"
        }



ScriptObjectTest:
    type: OBJECT
    definitions: initial_args|method_flag
    script:
    - define change_me <def[initial_args]>
    - while true {
        -
        - queue pause
        - inject <server.flag[]> locally
        }
    set name:
    - define change_me <player.
    
    get name:
    - determine <def[name]>

testflag:
    type: task
    definitions: target|flag
    script:
    - announce "<script.name> <%target%.flag[<def[flag]>]>"



