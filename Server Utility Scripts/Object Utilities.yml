#A set of scripts designed to replicate global namespace objects
#
#instead of define a new command called object?
#- object noob.intelligence ????
#
#- define noob.intelligence "5"
#- define noob.coding_skills "0"
#- narrate "noob with <def[noob].intelligence> brains and <def[coding_skills]> coding skills is realllllyyy a noob"
#- foreach <li@Each|time|he|studies> {
#    - define noob.intelligence ++
#    - define noob.coding_skills ++
#    }

#    - # define a new object
#    - Object  new_object
#    - #set its first attribute
#    - Object  new_object.name noobzilla
#    - Narrate "hi there <obj[new_object].name>"
#    - #attribute checking
#    - Object  new_object.job farmer
#    - If <obj[new_object].type.is[].to[]> == farmer {
#      - Narrate 'I see your job is <obj[new_object].job>, what is that?'
#      }
#    - Run "promote and announce" def:<obj[new_object]>

test_proc:
    type: task
    definitions: one|two
    script:
    - define test "li@one/1|
                    two/2|
                    three/3"
    - narrate "<def[test].map_get[one]>"


Object:
    #
    # - define kills <li@kills|10.escaped>
    # - define wins <li@wins|0.escaped>
    # - define none_or_setter <proc[object].context[red_team|set|<def[kills]>|<def[wins]>]>
    # - define team_stats <proc[object].context[red_team|get|kills|wins]>
    # - define team_red_wins <def[team_stats].get[]>
    # - define red_wins <proc[object].context[red_team|wins]>
    #
    type: procedure
    definitions: object_id|method
    script:
    - if !<def[object_id].exists> {
        - event "script generates error" "context:message|Need an object id|script|<script>"
        - queue clear
        }
    - if !<def[method].exists> {
        - event "script generates error" "context:message|Need an method refrence|script|<script>"
        - queue clear
        }
    - inject <def[method]> locally

    get:
    - if !<yaml[object_database].contains[<def[object_id]>]> {
        - event "script generates error" "context:message|invalid object id<&co> <def[object_id]>|script|<script>"
        - queue clear
        }
    - define attribute_list li@
    - foreach <queue.definitions> {
        - if !<yaml[object_database].contains[<def[object_id]>.<def[value]>]> {
            - event "script generates error" "context:message|invalid object path<&co> <def[value]>|script|<script>"
            - queue clear
            }
        # include the attribute and add it to the attribute_list as escaped data (it could be a list)
        - define attribute_list <def[attribute].include[<yaml[object_database].read[<def[object_id]>.<def[value]>].escaped>]>
        }
    - determine <def[attribute_list]>
    
    set:
    - if !<def[object_id].exists>
      || <def[object_id]> == null
      || <def[object_id]> == ''
      || <def[object_id]> == none {
        - event "script generates error" "context:message|Object ID cannot be null or <&sq><&sq> or none|script|<script>"
        - queue clear
        }
    
    - foreach <queue.definitions> {
        - if <def[value]> == <def[object_id]> foreach next
        - define data <def[value].unescaped.as_list>
        - define attrib <def[data].get[1]||none>
        - define value <def[data].get[2]||none>
        - if <def[attrib]> == none || <def[value]> == none foreach_next
        - yaml id:object_database set <def[object_id]>.<def[attrib]>:<def[value]>
        }
    - determine none









