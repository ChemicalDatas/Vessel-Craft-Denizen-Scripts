Is_Locked:
    type: procedure
    definitions: inventory
    script:
    - define active_lock "<def[inventory].list_contents.get[1]>"
    #checks if an item was created by an denizen item script
    - define item_script "<def[active_lock].scriptname>"
    #- narrate "item script: <def[item_script]>"
    - if <def[item_script].contains[Lock]> {
        - determine true
        } else {
        - determine false
        }

Has_Key_For:
    type: procedure
    definitions: inventory
    script:
    - define lock_string <def[inventory].list_contents.get[1].lore.escaped>
    #- narrate "locking string: <def[lock_string]>"
    #- narrate "<player.inventory.list_contents.with_lore[<def[lock_string]>].get[1]>"
    - if <player.inventory.list_contents.with_lore[<def[lock_string]>].get[1]> != null {
        - determine true
        } else {
        - determine false
        }

Sync Lore:
    type: task
    definitions: scribeable|standard
    script:
    - adjust <def[scribeable]> "lore:<def[standard].lore>" save:new_item
    - take <def[scribeable]>
    - give <entry[new_item].result>
    

#Needs custom item lore detection
Sync Item:
    type: task
    definitions: scribeable|standard
    script:
    - adjust <def[scribeable]>              display_name:<def[standard].display>    save:named_item
    - adjust <entry[named_item].result>     lore:<def[standard].lore>               save:complete_item
    - take <def[scribeable]>
    - give <entry[complete_item].result>
    


#Replaces an item with a keystring for lockable inventories    
Add KeyString:
    type: task
    definitions: changable
    script:
    - define keystring "||<black><magic><util.random.duuid>|<black><magic><util.random.duuid>"
    - define item "<def[changable].material.item>[lore=<def[keystring]>]"
    - narrate "item to change: <def[changable]>"
    - narrate "its material: <def[changable].material.item>"
    - take <def[changable]> from:<player.inventory> 
    - give <def[item]> to:<player.inventory>
    
#An idea...
Keypad Minigame:
    type: task
    definitions: 
    script:
    -
    

Lock Type:
    type: procedure
    definitions: inventory
    script:
    - determine "<def[inventory].list_contents.get[1]>.display.before[ ]>"
    
#Looks in the yaml for a coresponding dificulty rating. Might return null
Locked Difficulty:
    type: procedure
    definitions: inventory
    script:
    - define difficulty "<s@Chest Locking.constant[constants.<def[lock_type]>]>"
    - if <def[difficulty]> = null {
        - determine 0
        } else {
        - determine <def[difficulty]>
        }
    


#This will have the playeropen a temporary inventory. In it the gameboard will be setup.
#Then an update lockpick minigame will need to be called on each inventory action.
#Chests are 9 wide. -1 for face. <??/> -1 for ending </??>
Start Lockpick Minigame:
    type: task
    #     locked inventory|
    definitions: inventory|
    script:
    #Construct playground
    
    #determine the number of tumblers
    - define lock_type "<def[inventory].list_contents.get[1]>.display.before[ ]>"
    - define difficulty "<s@Chest Locking.constant[constants.<def[lock_type]>]>"
    
    #Build solution
    #Solution is 2 lists:
        #linked by index:
            # order of the tumblers
            # direction of the tumbler
            #sooo:
            #li@up|down|up|up
            #li@ 3|   4| 1| 2
            
    - define solution_order "<proc[Random Index In Range].context[<def[difficulty]>]>"
    - define solution_arrangment "<proc[].context[]>"
            
    #Build gameboard
    #Chests are only 9 wide
    - repeat 9 {
        - if <def[value]> = 1 {
            - define line_1 "i@iron_fence"
            - define line_2 "i@stick     "
            - define line_3 "i@iron_fence"
            
            } else {
            
            
            - if <proc[Threshold_Random_Success].context[1|2]> {
                - define solution "<proc[List Append Right].context[<def[solution]||li@>|<def[]>]>"
                - define line_1 "<proc[List Append Right].context[<def[line_1]||li@>|<def[i@air]>]>"
                - define line_2 "<proc[List Append Right].context[<def[line_2]||li@>|<def[i@iron_block]>]>"
                - define line_3 "<proc[List Append Right].context[<def[line_3]||li@>|<def[i@iron_fence]>]>"
                } else { 
                - define solution "<proc[List Append Right].context[<def[solution]||li@>|<def[]>]>"
                - define line_1 "<proc[List Append Right].context[<def[line_1]||li@>|<def[i@iron_fence]>]>"
                - define line_2 "<proc[List Append Right].context[<def[line_2]||li@>|<def[i@iron_block]>]>"
                - define line_3 "<proc[List Append Right].context[<def[line_3]||li@>|<def[i@air]>]>"
                }
            }
        }
    
    #Save correct solution for checking against in the update
    - flag player lockpick_minigame_solution:<def[game_instructions]>
    
    #This is the check to cancel other actions
    - flag player in_lockpick_minigame
    
    #This starts the game
    - inventory open orgin:<def[game_board]>
    


"Update Lockpick Minigame":
    type: procedure
    definitions: game_board|event
    script:
    - define line_1 <def[game_board].get[1].to[9]>
    - define line_2 <def[game_board].get[10].to[18]>
    - define line_3 <def[game_board].get[19].to[27]>
    #
    
    #if the event action matches the gameboards solution
    - if <def[event]> = good {
        - determine true
        } else {
        - determine false
        }
    
"Solved Lockpick Minigame":
    type: procedure
    definitions:
    script:
    - flag player in_minigame:!
    - flag player lockpick_minigame_solution:!