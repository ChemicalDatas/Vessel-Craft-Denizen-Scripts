# Script that listens for players opening inventories and checks if they have the right key for it.
Lockpicking:
    type: world
    lock type:
        pick: i@stick[displayname=lockpick]
        lock: i@iron_ingot[displayname=lock]
        key: i@blazerod[displayname=key]
        
        #lock difficulty descriptions
        #max value of 8 at the most.
        Redstone: 2
        Lapis: 3
        Coal: 4
        Iron: 5
        Gold: 6
        Obsidian: 7
        Diamond: 8
        Dragon: unpickable
        
        #Just replace with the first name of the lock type you want.
        #master: unpickable
        #dwarven: 8
        #elven:7
        #human:4
        #hard: 5
        #medium: 3
        #easy: 2
        
    
    events:
        on test_lock command:
        - determine passively fulfilled
        - define inventory <player.location.cursor_on[10].inventory>
        - define lock_type "<def[inventory].list_contents.get[1].display.before[ ]>"
        - define debug_output "Lock difficulty is: <script.yaml_key[lock type.<def[lock_type].strip_color>]>"
        - narrate "<def[debug_output]>"
        
        
        
        on synclore command:
        - determine passively fulfilled
        #Player bar is listed first 1 - 9 taken.
        - define chng <player.inventory.list_contents.get[1]>
        - define standard <player.inventory.list_contents.get[2]>
        #- narrate "Player inventory: <player.inventory.list_contents>"
        #- narrate "Changing the lore now"
        
        #- give "i@iron_ingot[display_name=lock;lore=abcd]" to:<player.inventory> slot:10
        - run "Sync Lore" def:<def[chng]>|<def[standard]>
        #- run "Add KeyString" def:<def[chng]>
        
        
        #This is to cancel the clicking on an inventory
        on player right clicks chest:
        - define chest <context.location.inventory>
        - if !<proc[Is_Locked].context[<def[chest]>]> queue clear
        - narrate "<red>Is locked"
        - if !<proc[Has_Key_For].context[<def[chest]>]>{
            - narrate "<gray>You need a key for this "
            - narrate "Seems to be locked with a <proc[Lock Type].context[<def[chest]>]> lock."
            - determine cancelled
            }
        - narrate "You have the key for this "
        
        
        on player breaks chest:
        - define chest <context.location.inventory>
        - if !<proc[Is_Locked].context[<def[chest]>]> queue clear
        - if !<proc[Has_Key_For].context[<def[chest]>]> {
            - narrate "<gray>You are not allowed to break this with out a key."
            - determine cancelled
            }
        
        on player opens inventory:
        #- narrate "opened inventory"
        - if !<player.has_flag[in_lockpick_minigame]> queue clear
        - flag player in_lockpick_minigame:!
        - narrate "Got tons of lockpicking experience sorta... tell chem to work on that!"
        
        
    
