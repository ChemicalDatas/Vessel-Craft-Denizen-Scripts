# Treasure Chests that correspond to an entry in a database.
# Items are added to the chest after a cooldown period.


Treasure Chest Handling:
    database_path: "scripts/Dropbox/Sync List/Mod Manager Chests/DataBase.yml"
    database_id: Treasure_Chest_Database
    
    type: world
    debug: false
    events:
        on server start:
        - run "Yaml Load" def:<script.yaml_keys[database_path]>|<script.yaml_keys[database_id]>
    
        #on player opens anvil:
        #- narrate "Player opened anvil...."
        #on player closes anvil:
        #- narrate "Player closed anvil...."
    
        on not player opens chest:
        - define chest <context.inventory>
        - if "!<proc[Is Database Chest].context[<def[chest]>]>"         queue clear
        - if "!<proc[Chest Can Have Loot Added].context[<def[chest]>]>" queue clear
        
        - flag server treasure_chests_loot_timer.<def[chest].location.simple> duration:10s
        - define database_entry "<proc[Get Chest Database Entry].context[<def[chest]>]>"
        - foreach <def[database_entry]> {
            - define item       "<def[value].split[ ].get[1]>"
            - define thresh     "<def[value].split[ ].get[2]>"
            - define out_of     "<def[value].split[ ].get[3]>"
            - define range      "<def[value].split[ ].get[4]>"
            - define max_number "<def[value].split[ ].get[5]>"
            
            - define amt "<proc[Random Range].context[<def[range]>]>"
            - if "<proc[Threshold Random Success].context[<def[thresh]>|<def[out_of]>]>" {
                - repeat <def[amt]> {
                    - if !<def[chest].contains[<def[item]>].qty[<def[max_number]>]> {
                        - define items "<proc[List Append Right].context[<def[items]||li@>|<def[item]>]>"
                        } else {
                        - announce "debug: <def[item]> in the chest has reached the max ammount"
                        }
                    }
                }
            }
        
        
        - define items <def[items].unescaped>
        - narrate "<red>TODO: <blue>Get the locations name from a d cuboid or world guard region"
        - announce "Items Added to the list: li@<def[items]>"
        - inventory add d:<def[chest]> o:in@generic[contents=<def[items].as_list>]

Is Database Chest:
    type: procedure
    definitions: chest
    script:
    - define title <def[chest].title.escaped>
    - define level <def[title].split[&co].get[2]>
    - define type "<def[title].split[ ].get[1]>"
    - define path chest.<def[type]>.lvl.<def[level]>
    - if <yaml[Treasure_Chest_Database].contains[<def[path]>]> {
        - determine true
        } else {
        - determine false
        }
        
        
Chest Can Have Loot Added:
    type: procedure
    definitions: chest
    script:
    - define loc <def[chest].location.simple>
    - if <server.has_flag[treasure_chests_loot_timer.<def[loc]>]> {
        - determine false
        } else {
        - determine true
        }
    

    
Get Chest Database Entry:
    type: procedure
    definitions: chest
    script:
    - define title "<def[chest].title.escaped>"
    - define level <def[title].split[&co].get[2]>
    - define type "<def[title].split[ ].get[1]>"
    - define path chest.<def[type]>.lvl.<def[level]>
    - define database_entry <yaml[Treasure_Chest_Database].read[<def[path]>].as_list>
    - determine <def[database_entry]>
    