# Script that adds extra drops to broken blocks based on player flags
# Needs event resolution flag 


Player Flagged Bonuses:    
    #Player flags contains the data to determine block bonuses
    #break_"material": threshold|out_of|item_to_drop|amt_to_drop
    #flagname:
    #   Each line is a new item to determine if it drops.
    #   - thresh|out_of|item_to_drop|amt_to_drop
    #   - 1     | 1000 | i@diamond  | 1
    #   - thresh|out_of|item_to_drop|range
    #   - 1     | 1    | i@coal     | 1-4
    type: world
    add_bonus_materials: true
    #supplant drops completly replaces drops with whats determined here.
    supplant_drops: false
    events:
        on player breaks block:
        - if <player.gamemode.is[==].to[creative]>
          queue clear
        
        - define drop_list
          li@
        
        - if <script.yaml_keys[add_bonus_materials]>
          define drop_list
          "<def[drop_list].include[<proc[Bonus Handling].context[break_<context.material.name>|<player>]>]>"
        
        - if <script.yaml_keys[supplant_drops]>
          determine <def[drop_list]>
        
        - foreach <def[drop_list]> {
            - drop <def[value]> <context.location>
            }
        
        on entity dies:
        - if <context.damager||none> == none 
          queue clear
        
        - define drop_list <context.drops||li@>
        
        - if <script.yaml_keys[add_bonus_materials]> {
            - define bonus
              "<proc[Bonus Handling].context[kill_<context.entity.name>|<context.damager>]>"
            
            - define drop_list
              <def[drop_list].include[<def[bonus]>]>
            }
        
        - determine <def[drop_list]>
        
    

#Searches for an event resolution in the players flagged data
Bonus Handling:
    # This builds an dlist of items for the drop command to handle
    type: procedure
    definitions: flag|actor
    script:
    - define drop_list li@
    
    - if !<def[actor].is_spawned||false>
      determine <def[drop_list]>
    
    - if !<def[actor].is_player>
      && !<def[actor].is_npc>
      determine <def[drop_list]>
    
    - if !<def[actor].has_flag[<def[flag]>]> 
      determine <def[drop_list]>
    
    - repeat <def[actor].flag[<def[flag]>].size> {
        - define item_set <def[actor].flag[<def[flag]>].get[<def[value]>]>
        - define thresh <def[item_set].as_list.get[1]>
        - define out_of <def[item_set].as_list.get[2]>
        - define bonus <def[item_set].as_list.get[3]>
        - define amt <def[item_set].as_list.get[4]>
        - define amt "<proc[Random Range].context[<def[amt]>]>"
        
        - if "<proc[Threshold Random Success].context[<def[thresh]>|<def[out_of]>]>" {
            - repeat <def[amt]> {
                - define drop_list "<def[drop_list].include[<def[bonus]>]>"
                }
            }
        - define drop_list <def[drop_list].unescaped>
        }
    
    - if <def[drop_list].is_empty>
      determine NO_DROPS_OR_XP
    
    - determine <def[drop_list]>
    
#












