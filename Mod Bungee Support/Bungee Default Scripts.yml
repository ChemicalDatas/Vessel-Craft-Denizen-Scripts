Bungee Connected Servers:
    type: world
    global_server_database: ../../../vesselcraft/sai_database
    events:
        on server start:
        #
        # register in a global database this servers name. The name registered with depenizen.
        # load depenizen yaml, get name
        # perhaps use mysql?
        
        
        on servers command:
        #add_server
        #remove_server
        #list_servers
        - determine passively fulfilled
        - define fallback_value <util.random.duuid>
        - define args <context.args>
        - define path <script.yaml_key[flagpath]>
        - if <def[args].is_empty>
          || <def[args].contains[NO_MAP_VALUE]> {
            - narrate "Usage<&co> args<&co> add_server:connected_bungee_server_name"
            - queue clear
            }
        - if <def[args].map_get[add_server]||NO_MAP_VALUE> != NO_MAP_VALUE {
            - define serverlistpath <def[path]>.bungee_servers
            - define server <def[args].map_get[add_server]>
            - if !<server.has_flag[<def[serverlistpath]>]> {
                - flag server <def[serverlistpath]>:|:li@
                }
            - define servers <server.flag[<def[serverlistpath]>].as_list||li@>
            - if <def[servers].contains[<def[server]>]> {
                - narrate "That server is already recorded. <red><def[servers].replace[<def[server]>].with[<yellow><def[server]><red>]>"
                - queue clear
                } else {
                - flag server <def[serverlistpath]>:|:<def[server]>
                - narrate format:formatted "Added <def[server]> to server list <def[servers]>"
                }
            }
        - if <def[args].map_get[remove_server]||NO_MAP_VALUE> != NO_MAP_VALUE {
            - announce "testing here"
            }
        