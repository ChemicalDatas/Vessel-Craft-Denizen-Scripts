#
#A few items to fill out the mod for displays.
#



Legendary_Sword:
    type: item
    #no_id: true
    random_op:
    - define random_op <server.list_ops.random>
    - determine <def[random_op].name.display||<def[random_op].name||Could_Nozt_fulind_opz_namz...>>
    
    base_damage:
    - determine <util.random.int[5].to[10]>
    
    test_damage:
    - determine 10
    
    material: i@wood_sword
    
    display name: <red>Legendary <gold>Sword
    
    
    lore:
    # Need to input the script name and the path intended for parsing
    #Note When using the __Return__ procedure here any tags input will not parse. Ask MCMONKEY why.
    - <gold>Damage<&co> <proc[__Return__].context[Legendary_Sword|base_damage]>
    - <red>Fire <reset>Ticks<&co> <gold><proc[__Return__].context[Legendary_Sword|test_damage]>
    - <gold>Casts <red>fireball <reset>on <blue>right click
    - <gold>Cancels fire damage
    - <gold>Magic Words<&co> <red>fireball
    - ''
    - <blue>Made Specially for <gold><player.name.display||<player.name>>
    - <red>Stolen from <proc[__Return__].context[Legendary_Sword|random_op]>

    on player right clicks:
    - execute as_op "cast fireball"

    on player damaged by fire:
    - determine cancelled
    
    on player damaged by fire_tick:
    - determine cancelled
    
    on player damages entity:
    - define damage <player.item_in_hand.lore.strip_color.as_list.map_get[damage].split_by[<&co>]>
    - burn <context.entity> "duration:<player.item_in_hand.lore.strip_color.as_list.map_get[fire ticks].split_by[<&co>]>"
    - determine <def[damage]>
    
    on player chats fireball:
    - execute as_op "cast fireball"
    - determine cancelled
    

Ingas Exotic Sword:
    type: item
    material: i@diamond_sword
    display name: <gray>Ingas Sword <reset>of <yellow>Light
    lore:
    - I love Daddy
    - Daddy Loves you back.
    - This is how you make the lore
    
    on player animates:
    - define targets "<proc[Block Line].context[<player>|5]>"
    - showfake m@glowstone <def[targets]> duration:d@2s
    
    
    
    
Legendary_Helmet:
    type: item
    #no_id: true
    random_op:
    - define random_op <server.list_ops.random>
    - determine <def[random_op].name.display||<def[random_op].name||Could_Nozt_fulind_opz_namz...>>
    
    Experience_Multiplier:
    - determine <util.random.int[50].to[200].div[100]>
    
    material: i@leather_helmet
    display name: <red>Legendary <gold>Helmet
    lore:
    # Need to input the script name and the path intended for parsing
    #Note When using the __Return__ procedure here any tags input will not parse. Ask MCMONKEY why.
    - <gold>Exp_multiplier<&co> <proc[__Return__].context[Legendary_Helmet|Experience_Multiplier]><&pc>
    - ''
    - <blue>Now owned by <gold><player.name.display||<player.name>>...
    - <red>Stinks from the sweat of <proc[__Return__].context[Legendary_Helmet|random_op]>

    on player changes xp:
    - define multiplier <player.equipment.helmet.lore.strip_color.as_list.map_get[Exp_multiplier].split_by[<&co>]>
    - define old_xper <context.amount>
    - define new_xper <def[old_xper].mul[<def[multiplier].replace[<&pc>]>]>
    - determine <def[new_xper]>



# elements:
# - fire
# #- ice
# - lightning
# - void
# - wither
# - poison
# - magic
# - fall
# - suffocation

# spells:
# - fireball
# - volley


testitem:
    type: item
    material: i@diamond_sword,<player.chat_history[1]>
    
ClassItemDatabase:
    type: task
    script:
    - define noob noob
    
    Class3SeriesWeapon:
        series_list:
        - define list "li@Wolf Run|Imperial Guard|Elemental Fire|Elemental Ice"
        - determine <def[list].random>
        spells:
            #Frequency that it even gets a spell
            #the values for the value... are checks, goes through each item in the list checking for a value
            frequency:
            - determine <proc[Threshold Random Success].context[1|10]>
            fireball:
            - determine <proc[Threshold Random Success].context[5|10]>
            volley:
            - determine <proc[Threshold Random Success].context[5|10]>
        materials:
        - define list li@i@wood_sword|i@stone_sword|i@gold_sword|i@iron_sword|i@diamond_sword
        - determine <def[list].random>
        
    
    

Class3SeriesWeapon:
    type: item
    material: <proc[__Return__].context[ClassItemDatabase|Class3SeriesWeapon.materials]>
    display name: A <blue>Unknown_Material_Modifier Unknown_Material <reset>of <blue>Unknown_Class<&sq>s Unknown_Bonus
    lore:
    - <blue>Experience: 0 / 100
    - <gray>Level: 1
    - ''
    - <blue>Charge: 0 / 3
    - <blue>Damage: 10 / 100
    - <blue>Damage Bonus: + 10<&pc>
    - ''
    - <blue>????
    - <blue>????
    - <yellow>????
    - ''
    - ''
    - <italic><light_purple>class series: <red><script.yaml_keys[series_list].random>
    - <yellow>MagicAnchorId: <proc[__Return__].context[GetClass3SeriesID|LinkAnchorId]>




































