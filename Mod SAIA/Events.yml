# Script that replaces predefined characters for their ASCII equivalents
# Utilizes a world script as a key value lookup table. The world script name should be: kvreplacment

SAI Listener:
    # There is 1 character that can mess the whole line up.
    # that is the back-slash: '\'
    # in denizen its an character that was added after <escape:<def[your thing]>>.
    #
    constants:
        confirmation response:
        denial response:
        small talk:
        information gathering response:
        
    catch words:
        op:
        - op
        - admin
        - owner
        
        transportation:
        - tp
        - teleport
        
        spawn:
        - spawn
        - give
        - mob
        
        gamemode:
        - gm
        - gamemode
        - gmc
        - gms
        - gma
        - creative
        - survival
        - adventure
        
        message:
        - tell
        - pm
        - message
        - send
        - mail
        - announce
        - broadcast
        - 
        
        discipline:
        - ban
        - freeze
        - mute
        - jail
        - warn
        - kick
        
        special:
        - field
        - display
        - hollo
        - schematic
        - animation
        - animate
        
        desire:
        - want
        
        information:
        - where
        - treasures
        - what
        - who
        - stats
        
        s helper:
        - reload
        - scripttest
        - speedtest
        - scripts
        
        permission:
        - add command
        - remove command
        - add permission
        - add temporary permission
        - remove permission
        - add flag
        - remove flag
        - clear flag
        
        icons:
        - icon
        - icons
        
        
        
        
        
        
    type: world
    events:
        on player chats:
        #Command input starting with "sai (command)"
        - if <context.message.contains[regex:\bsai\b.*$]> {
            - run "SAI Response Determination" def:<context.message>|<script>
            - queue clear
            }
        
        #Just if you say his name
        - if <context.message.contains[regex:^.*\bsai\b.*$]> {
            - run "SAI Casual Chat" def:<context.message>|<script>
            - announce "setting casual chat context" format:SAI
            }
#


"SAI Response Determination":
    type: task
    definitions: text|script
    script:
    #
    # - foreach <<def[script]>.constants[catch words].as_list> {
    #   - define catcher <def[script].constant[catch words.<def[value]>]>
    #   - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
    #       - run <def[value]> def:<def[text]>|
    #       }
    #   }
    #
    
    - wait 1
    
    #Op Handling
    - ^define catcher "<def[script].constant[catch words.op].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "I Handle Op issues" format:SAI
        - run op_handling def:<def[text]>
        - queue clear
        }
    
    
    #Transportation 
    - ^define catcher "<def[script].constant[catch words.transportation].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "teleport thinggs" format:SAI
        - run tp_handling def:<def[text]>
        - queue clear
        }
    
    
    #Spawning
    - ^define catcher "<def[script].constant[catch words.spawn].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Im not sure if I can do that for you..." format:SAI
        - run spawn_handling def:<def[text]>
        - queue clear
        }
    
    
    #Gamemode
    - ^define catcher "<def[script].constant[catch words.gamemode].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "You asked me to handle a game mode change for you" format:SAI
        - run gamemode_handling def:<def[text]>
        - queue clear
        }
    
    
    #Messaging
    - ^define catcher "<def[script].constant[catch words.spawn].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "I will deliver that message to them for you." format:SAI
        - run message_handling def:<def[text]>
        - queue clear
        }
    
    
    #Discipline
    - ^define catcher "<def[script].constant[catch words.discipline].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Ok, Ill shall enter into heavy hand mode. <&nl>Let me get my gloves on." format:SAI
        - run spawn_handling def:<def[text]>
        - queue clear
        }
    
    
    #special
    - ^define catcher "<def[script].constant[catch words.special].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Special Commands I see?" format:SAI
        - run special_effect_handling def:<def[text]>
        - queue clear
        }

    
    - ^define catcher "<def[script].constant[catch words.desire].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "You know, id like to tell you what I want every now and then..." format:SAI
        - run desire_handling def:<def[text]>
        - queue clear
        }
    
    
    
    - ^define catcher "<def[script].constant[catch words.information].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Let me see what I can find for you." format:SAI
        - run information_handling def:<def[text]>
        - queue clear
        }

    
    
    - ^define catcher "<def[script].constant[catch words.s helper].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Im not sure if I can do that for you..." format:SAI
        - run script_helper def:<def[text]>
        - queue clear
        }
    
    
    
    - ^define catcher "<def[script].constant[catch words.permission].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Well, some ones going to be happy with their new ability. [smile]" format:SAI
        - run permission_helper def:<def[text]>
        - queue clear
        }
        
    
    
    - ^define catcher "<def[script].constant[catch words.icons].escaped>"
    - if "<proc[String Contains Regex].context[<def[text]>|<def[catcher]>]>" {
        - announce "Im not sure if I can do that for you..." format:SAI
        - run icon_information def:<def[text]>
        - queue clear
        }

    - announce "Im afraid I didnt understand your last statment..." format:SAI
    - announce "<&dq><def[text].replace[sai ]><&dq>" format:SAI 


"String Contains Regex":
    #
    # This might be a little slower than checking if <something.contains[word]>
    # Regex is slower than word checking. Better for complexity but slower
    #
    # This uses regex to check whole words, not just if a word contains a set of characters
    # 
    #
    type: procedure
    definitions: string|word_list
    script:
    - foreach <def[word_list].unescaped.as_list> {
        - if <def[string].contains[regex:^.*\b<def[value]>\b.*$]> {
            - determine true
            }
        }
    - determine false
        


