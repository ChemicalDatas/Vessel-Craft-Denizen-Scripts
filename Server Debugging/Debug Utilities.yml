#################################################################################################################################
#                                                                                                                               #
# A Set of debugging ideas that might be useful for others.                                                                     #
#                                                                                                                               #
#                                                                                                                               #
#################################################################################################################################


#
"x5":
    #
    # A script for testing out an idea for denizen automated script tests
    #
    scripttest:
        test_1:
            input: 1
            expected: 5
            setup:
            - define scripts_input "<script.yaml_key[scripttest.test_1.input]>"
            test:
            - define scripts_real_return <proc[<script.name>].context[<def[scripts_input]>]>
            teardown:
            - announce Tearing_down_script
            - flag server delete_me !
            
    type: procedure
    definitions: number
    script:
    - determine <def[number].mul[5]>


"Test Path":
    scripttest:
        test_1:
            input:
            expected: "This is the <blue>expected value"
            setup:
            test:
            teardown:
    type: procedure
    definitions:
    script:
    - determine "But this is the <red>received value"
    
"STest":
    #
    # A script that runs the tests set up in the script name provided
    #
    # The script in question requires 
    #
    type: task
    definitions: script_name
    script:
    - define path <def[script_name].relative_filename>
    - yaml load:<def[path]> id:UT
    - announce "<blue>Loaded yaml ids: <yellow><yaml.list>" to_console
    
    - define number_of_tests <yaml[UT].list_keys[<def[script_name]>.scripttest].size>
    - announce "<blue>Starting <green><def[number_of_tests]> <blue>tests." to_console
    - repeat <def[number_of_tests]> {
        - define path scripttest.test_<def[value]>
        - if <def[script_name].container_type> == procedure {
            - inject <def[script_name]> "path:<def[path]>.setup"
            - inject <def[script_name]> "path:<def[path]>.test"
            - inject <def[script_name]> "path:<def[path]>.teardown"
            - define scripts_expected_return <def[script_name].constant[<def[path]>.expected]>
            - if <def[scripts_real_return]> == <def[scripts_expected_return]> {
                - define script_name <def[script_name]>
                - define test_results "<proc[Append Right].context[]>"
                - define test_names
                - announce "<gold>Script was successful" to_console
                - announce "<blue>Scripts Return: <gold><def[scripts_real_return]>" to_console
                - announce "<blue>Expected Value: <gold><def[scripts_expected_return]>" to_console
                } else {
                - announce "<red>Script failed"
                }
            }
        
        - if <def[script_name].constant[type]> == task {
            - announce "Testing a task"
            - run <def[script_name]> path:script2
            }
        }
        
    
    - yaml unload id:UT


Announce Arguments Passed:
    #Injected script to announce all the args passed to a script
    #If placed at the end of a script, this will gather the names of all definitions within a script.
    type: task
    script:
    - announce ""
    - announce "<red><magic>ii<reset><bold>Arguments to <blue><bold><queue.script.name><reset><red><magic>ii<reset><red>:"
    - foreach <queue.definitions> {
        - announce "<blue><bold>%value%: <reset><def[%value%]>"
        }


__objt:
    type: task
    definitions: none
    script:
    - define type li@player|queue|script|npc
    - foreach <def[type]> {
        - define object <%value%>
        - narrate ''
        - narrate "%value% %object% <def[object]> <def[object].type>"
        }

__queuet:
    type: task
    script:
    - define queue <queue>
    - define queue_accessors "queue_id/id|
                            queue_size/size|
                            queue_ state/state|
                            queue_script/script|
                            queue_determination/determination|
                            queue_type/type|
                            queue_speed/speed|
                            queue_commands/commands|
                            queue_debug/script.debug|
                            queue_definitions/definitions"
    
    - foreach <def[queue_accessors].as_list> {
        - define attribute <def[value].split[/].get[1]>
        - define accessor <def[value].split[/].get[2]>
        - define %attribute% <def[queue].%accessor%||none>
        - narrate "<green>%attribute%<&co> <gold><def[%attribute%]>"
        
        
        }
    - narrate ""
    - narrate ""
    

#todo: check if using not only type checking but default_values too....
#Its possible to use <el@type.type>, .as_list returns list, and "strings" return elements.
#But '1'.type returns element instead of int. Only way to determine valid ints for math tags is "element.as_int"
#if that returns as valid then its truly something the scripts can use.
typecheck:
    #
    #injected script for checking type values predefined within a script.
    # if a script has 2 set values location and outset. There needs to be 
    # yaml keys prefixed with type_ and contains a acessor value. That needs to be returned as valid
    # for this to raise an input error
    #script:
    #   type_int: as_int
    #   type_element: prefix
    #   type_player: as_player
    #   type_queue: as_queue
    #   default_element: 49
    #   default_int: 1
    #   definitions: int|element|player|queue
    #   script:
    #   - narrate "yada yada"
    #
    #The types need to be of similar name as the definitions
    #
    # Todo: add support for special values and accessors ex: contains[__must_contain_this_value],
    # this might be beyond the scope and the security value of the script.
    #
    # This does use the <parse> tag to fill out default values, meaning you should beware 
    # What the default values will be parsed out to. It should be straitforward and already defined at
    # someplace within the script as a yaml.key value.
    type: task
    speed: 0t
    script:
    - ^define __ignored_values li@value|loop_index|__ignored_values|__required_script_definitions|__present_definitions|__missing_definitions|__accessor|__expected_value
    - ^define __required_script_definitions <queue.script.yaml_key[definitions].as_list||none>
    # finds default values and missing values then defines those within the script
    - if <def[__required_script_definitions]> != none {
        - ^define __present_definitions <queue.definitions.exclude[<def[__ignored_values]>]>
        - ^define __missing_definitions <def[__required_script_definitions].exclude[<def[__present_definitions]>]>
        - foreach <def[__missing_definitions]> {
            - if <queue.script.yaml_key[default_<def[value]>]||<queue.script><&dot>yaml_key<&lb><def[value]><&rb>> != <queue.script><&dot>yaml_key<&lb><def[value]><&rb> {
                - define __missing_definitions <def[__missing_definitions].exclude[<def[value]>]>
                - define %value% <parse:<queue.script.yaml_key[default_<def[value]>]>>
                }
            }
        - if !<def[__missing_definitions].is_empty> {
            - ^define __message "Definition(s) failed existance check.<&nl>
              Required definitions<&co> <red><def[__required_script_definitions].space_separated><blue><&nl>
              Missing definitions<&co> <red><def[__missing_definitions].space_separated>"

            - ^event "script generates error" context:message|<def[__message]>|script|<queue.script>|queue|<queue>
            - queue clear
            }
        - foreach <def[__present_definitions]> {
            - if <def[value].starts_with[__]> foreach next
            - ^define __accessor <queue.script.yaml_key[type_%value%]||none>
            - if <def[__accessor]> == none foreach next
            - ^define __expected_value <parse:<&lt>def[%value%].%__accessor%<&pipe><&pipe>failed_tag<&gt>>
            - if <def[__expected_value]> == failed_tag {
                - ^define __message "Definition(s) failed type check.<&nl>
                  def<&co><def[value]> value<&co><def[%value%]><&nl>
                  type_check<&co><def[__accessor]>"

                - ^event "script generates error" context:message|<def[__message]>|script|<queue.script>|queue|<queue>
                - queue clear
                }
            }
        }
    - foreach <def[__ignored_values]> {
        - define %value%:!
        }
    - define loop_index:!
    - define value:!
    
__tstchecking:
    type: task
    definitions: int|element|restricted_list|extra_value
    type_int: as_int
    type_element: prefix
    type_restricted_list: parse[name]
    default_int: 1
    default_extra_value: default_hardcoded_script_value
    script:
    - inject typecheck
    - foreach <queue.definitions> {
        - announce "Value<&co> <def[value]><&co> <def[%value%]>"
        }
    - announce "the extra value was<&co> <def[extra_value]>"
    - announce "<script.name> completed and errors were raised if any."

THE FUTURE OF DEBUG SCRIPTING:
    type: task
    definitions: accessor
    script:
    - announce "%accessor%"
    - define list <server.list_online_players>
    - announce "<parse:<&lt>def[list].%accessor%<&gt>>"


