
#todo: have the server flaged to output to a type of output.
#   log
#   console
#   to_ops
#   to_flagged
#   none
#todo: Create a yaml object representing the error for storage while the server runs
#todo the output feature will read a yaml object thats a culmulation of the error
#yaml object should contain
#   relative file name
#   The error message

#The error yaml file should be ordered by
#   error type: ex, invalid tag, exceptions, command errors.... 
#       script:
#           line of erroring code
#
#Possible to determine a failed ./ex command
# queue.id.split[_].contains[EXCOMMAND]
#
#        #loc/yaml_key[<&lt>def[script]<&gt>].size|
#        #step/step[<&lt>player<&gt>]|
#        #assigned_to/get_npcs_assigned[<&lt>def[script]<&gt>]
#
#
#            - define script_max_lines_of_code   <def[skript].yaml_key[script].size>
#            - define remaining_lines_of_code    <def[size]>
#            - define script_failed_line         <def[script_max_lines_of_code].sub[<def[remaining_lines_of_code]>]>
#            
#            - define offending_line             <def[skript].yaml_key[script].get[<def[script_failed_line]>]>
#            - define command                   "<def[offending_line].split[ ].get[1]>"
#            - define arguments                  "<def[offending_line].split[ ].get[2].to[<def[offending_line].split[ ].size>]>"
#
# todo: have some default type checking built into scripts
#


Determine Error Type:
    type: procedure
    definitions: message
    script:
     - define error_types "li@Missing Tag|Invalid dCommand|Invalid Arguments|Depreciated|Internal exception was thrown!"
     -
     - determine <def[error_type]>


ScriptDebug:
    type: world
    script_error_object_file: script_error_objects.yml
    events:
        on server start:
        - run "yaml load" def:<script.yaml_key[script_error_object_file]>|error_objects
        - while true {
            - wait d@1h
            - run "yaml save" def:<script.yaml_key[script_error_object_file]>|error_objects
            }
        
        #on server stop
        on stop command:
        - run "yaml save" def:<script.yaml_key[script_error_object_file]>|error_objects
        
        on script generates error:
        - if !<server.has_flag[debug_output]> queue clear
#        - if <context.script||none> != none {
#            - yaml
#              load:<context.script.relative_filename>
#              id:<context.script.name>
#              
#            - run "Build Yaml Error Object"
#              def:<context.message>|<context.queue>|<context.script>
#            }
        - define player "
          <context.queue.player||
          <queue.player||
          <player||
          none>>>"
        
        - define npc "
          <context.queue.npc||
          <queue.npc||
          <player.selected_npc||
          none>>>"
        
        - define queue
          <context.queue||none>
        
        - define script
          <context.script||none>
        
        - inject "get debug data"
        
        #ignored printing data based off of whats generated in the script get debug data
        - define ignored_data 
            li@none|ignored_data|loop_index|value|type|accessor|attribute|object|accessor_types|npc_accessors|player_accessors|queue_accessors|script_accessors|file_location|file_name|file
        
        - define ignored_data
          <def[ignored_data].include[player_list_flags]>
        
        - if <def[script].relative_filename||none> != none {
            - define file_location <def[script].relative_filename.split[<&dot>].get[1]>
            - define file_location /plugins/denizen<def[file_location]>
            - define file_name <def[script].name>_errors.log
            } else {
            - define file_location /plugins/denizen/scripts
            - define file_name general_errors.log
            }
        
        
        - define file <def[file_location]>_error_log/<def[file_name]>
        #- announce "file<&co> <def[file]>"
        #- define file /plugins/denizen/script_errors.log
        
        #output
        - announce "<red>[<def[script].name||NOSCRIPT>] <gold><context.message>"
        - log "=======<script.name>======="                                                                 type:warning file:<def[file]>
        - log "Script<&co> <&lb><def[script].name||Unknown Script><&rb> <--- Generated an error."           type:none file:<def[file]>
        - log "The message is as follows<&co>"                                                              type:none file:<def[file]>
        - log "<context.message>"                                                                           type:none file:<def[file]>
        - foreach <queue.definitions.alphanumeric> {
            - if <def[ignored_data].contains[<def[value]>]> 
              || <def[%value%]> == none {
                - foreach next
                }
            - log "<&lb><def[value]><&rb> <def[%value%]>"                                                   type:none file:<def[file]>
            }
        - log "=======Finished with Debug Data======="                                                      type:none file:<def[file]>
        
        
        on server generates exception:
        #- if !<server.has_flag[debug_output]> queue clear
        #- run "Notify Debug" def:<context.message>|<context.queue||none>|<context.script||none> instantly


Get Debug Data:
    #
    # INJECTED SCRIPT
    # This script defines data based on the definitions within
    #
    #this requires definitions to be already defined,
    # - define player <player>
    # - define player <queue.player>
    # - define queue <context.queue>
    # - define script <s@testing_sorta>
    # - define npc <player.selected_npc>
    type: task
    script:
    - define queue_accessors "
        id/id|
        size/size|
        state/state|
        script/script|
        determination/determination|
        type/type|
        speed/speed|
        commands/commands|
        debug/script.debug|
        definitions/definitions"
    
    - define script_accessors "
        container_type/container_type|
        cooled_down/cooled_down|
        filename/filename|
        relative_filename/relative_filename|
        name/name|
        debug/debug|
        prefix/prefix|
        object_type/object_type"
        #loc/yaml_key[<&lt>def[script]<&gt>].size|
        #step/step[<&lt>player<&gt>]|
        #assigned_to/get_npcs_assigned[<&lt>def[script]<&gt>]
    
    - define npc_accessors "
        id/id|
        spawned/spawned|
        owner/owner|
        name/name|
        nickname/nickname|
        protected/is_protected|
        lookclose/lookclose|
        previous_location/.location.previous_location.simple|
        location/location.simple|
        nav_target/navigator.target_location|
        teleport_on_stuck/teleport_on_stuck|
        navigating/navigator.is_navigating|
        base_speed/navigator.base_speed|
        range/navigator.range|
        attack_range/navigator.attack_range|
        stratagey/navigator.attack_stratagey|
        speed_modifier/navigator.speed_modifier|
        speed/navigator.base_speed|
        avoid_water/navigator.avoid_water|
        base_speed/navigator|
        has_assignment/has_script|
        script/script|
        flags/list_flags|
        engaged/is_engaged|
        anchors/anchor.list|
        inventory/inventory.list_contents|
        traits/traits|
        nearby_npcs/location.find.npcs.within[25]"
    
    - define player_accessors "
        name/name|
        display_name/name.display|
        list_name/name.list|
        entity_id/eid|
        save_name/save_name|
        prefix/prefix|
        selected_npc/selected_npc|
        is_op/is_op|
        location/location.simple|
        chat_history/chat_history_list|
        target/target|
        open_inventory/open_inventory|
        is_op/is_op|
        location/location.simple|
        chat_history/chat_history_list|
        target/target|
        open_inventory/open_inventory|
        item_on_cursor/item_on_cursor|
        money/money|
        list_flags/list_flags.alphabetical|
        fall_distance/fall_distance|
        debug/debug"
    
    #this requires definitions to be already defined,
    # - define player <player||none>
    # - define player <queue.player||none>
    # - define queue <context.queue||none>
    # - define script <s@testing_sorta||none>
    # - define npc <player.selected_npc||none>
    
    #todo: maybe I might want to add to a list of attributes instead of creating definitions
    #by reason of possibility of overwriting other definitions within a script
    #thats why the definition created is %type%_%attribute%  or npc_location instead of just location
    - define accessor_types li@queue|script|player|npc
    - foreach <def[accessor_types]> {
        #store the type so its not overwritten later
        - define type %value%
        #get the calling scripts value
        - define object <def[%value%]||none>
        #if there was a failed or no definition at all
        - if <def[object]> == none foreach next
        #foreach local definitions, queue_accessors, etc...
        - foreach <def[%type%_accessors].as_list> {
            #split the name from the accessor value
            - define attribute <def[value].split[/].get[1]>
            - define accessor <def[value].split[/].get[2]>
            ##access the attributes on the calling scripts object. eg player.name, queue.size, etc...
            - define %type%_%attribute% <def[object].%accessor%||none>
            }
        }
    



debug format:
    type: format
    format: "<proc[Iconize].context[<dark_blue>[debugger]<reset> <text>]>"



"Debug Dispatcher":
    #############################################################################################################################
    #                                                                                                                           #
    # Debug dispatcher will unescape the information sent to the dispatcher.                                                    #
    #                                                                                                                           #
    # Id like this to have multiple ways to inform the player of the debug                                                      #
    # 1 boss bar                                                                                                                #
    # 2 side bar                                                                                                                #
    # 3 in a book                                                                                                               #
    # 4 Under the npc name?                                                                                                     #
    # 5 In the tab menu.                                                                                                        #
    # 6 Using the holo menus                                                                                                    #
    # 7 Plain old Chat Display                                                                                                  #
    # 8 Using the log command                                                                                                   #
    #                                                                                                                           #
    #############################################################################################################################
    type: task
    debug: true
    definitions: debug_text|method_of_display
    script:
    - define debug_text <def[debug_text].unescaped>
    - define method_of_display <def[method_of_display].unescaped||chat>
    