#
# A set of scripts to record stats about the server for the owner to determine the servers health
#
Server Health Ping:
    type: world
    events:
        on queuestats command:
        - determine passively fulfilled
        - run "Check Queue Stats"
        
        on lag command:
        - determine passively fulfilled
        - narrate "Gathering System Stats"
        - narrate "<red><server.recent_tps>"
        - if <server.list_plugins.contains[pl@NoCheatPlus]||false> {
            - execute as_server "ncp lag" save:ncp_stats
            - narrate <entry[ncp_stats].output>
            }
        
    

# todo: create a script that checks and warns admins of scripts and event handlers that are
# taking wayy too much time.
Check Queue Stats:
    type: task
    script:
    - foreach "<queue.stats.split[<&nl>Event ]>" {
        - if "<def[value].contains[(0 script fires)]>" foreach next
        - narrate "<def[value]>"
        - wait d@2s
        }


#./ex run ncptest
ncptest:
    type: task
    speed: 0t
    script:
    - define extra_spike_info 
      "li@ms within the last 40 to 60 minutes.|<&ns><&ns><&ns><&ns> TPS lag <&ns><&ns><&ns><&ns>|Perc.[time]"
    
    - define extra_tick_info 
      li@[1s]|[3.3s]|[270s]
    
    - execute as_server
      "ncp lag"
      save:ncp_stats
    
    - define ncpstats
      <entry[ncp_stats].output>
    
    - define reduced
      "<def[ncpstats].space_separated.split[<&co>]>"
    
    - define lag_spikes_data
      <def[reduced].get[2]>
    
    - foreach <def[extra_spike_info]> {
        - define lag_spikes_data <def[lag_spikes_data].replace[<def[value]>]>
        }
    
    - define avg_tick_data
      <def[reduced].get[3]>
    
    - foreach <def[extra_tick_info]> {
        - define avg_tick_data <def[avg_tick_data].replace[<def[value]>]>
        }
    
    
    - announce "<gold>spike data<&co> <red><def[lag_spikes_data]>"
    - announce "<gold>tick data<&co> <red><def[avg_tick_data]>"
    
