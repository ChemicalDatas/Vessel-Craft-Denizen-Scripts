#
# A set of scripts to record stats about the server for the owner to determine the servers health
#
Server Health Ping:
    type: world
    events:
        on server start:
        - run "Server TPS Recorder" id:server_tps_recorder
        - flag server start_ticks:<util.date.time.duration>
        
        on scripttps command:
        - determine passively fulfilled
        - define server_tick_start      <server.flag[start_ticks]>
        - define date_suggested_ticks   <util.date.time.duration.in_ticks.sub[<def[server_tick_start].in_ticks>]>
        - define total_recorded_ticks   <q@server_tps_recorder.definition[ticks]>
        - define ratio                  <def[date_suggested_ticks].div[<def[total_recorded_ticks]>]>
        - narrate "Ticks since start<&co> <red><def[total_recorded_ticks]><reset><&nl>
                    suggested ticks<&co> <red><def[date_suggested_ticks]><reset><&nl>
                    difference of<&co> <red><def[date_suggested_ticks].sub[<def[total_recorded_ticks]>]><reset><&nl>
                    which is <red><def[ratio].round>x slower."
        
        on lag command:
        - determine passively fulfilled
        - narrate "Gathering System Stats"
        
        - flag server tps_requesters:->:<player>
        
        - if !<queue.exists[q@lag_test]> {
            - run "Start Tps Test" def:<context.args.get[1].as_duration||d@1s>|<context.server||false> id:lag_test
            }
        - if <server.list_plugins.contains[pl@NoCheatPlus]> {
            - execute as_server "ncp lag" save:ncp_stats
            - define ncpstats <entry[ncp_stats].output>
            - announce "<def[ncpstats]>"
            }
        
    

Server TPS Recorder:
    #runs indefinitely
    type: task
    script:
    - define ticks 0
    - while true {
        - define ticks <def[ticks].add[1]>
        - wait d@1t
        }
    

Start TPS Test:
    type: task
    definitions: test_time|console
    speed: 0t
    script:
    - define test_time
      <def[test_time].as_duration||d@1s>
    
    - define console
      <def[console]||false>
    
    - define ticks 0
    
    - while <util.date.time.duration.sub[<queue.start_time>].in_ticks.is[or_less].than[<def[test_time].in_ticks>]> {
        - define ticks <def[ticks].add[1]>
        - wait d@1t
        }
        
    - if <def[console]>
      announce "Tps Results<&co> <def[ticks].div[<def[test_time].in_seconds>]> ticks per second." to_console

    
    - if !<server.has_flag[tps_requesters]>
      queue clear
    
    - narrate "Tps Results<&co> <def[ticks].div[<def[test_time].in_seconds>]> ticks per second."
      targets:<server.flag[tps_requesters]>
    
    - flag server tps_requesters:!
    

#./ex run ncptest
ncptest:
    type: task
    speed: 0t
    script:
    - define extra_spike_info 
      "li@ms within the last 40 to 60 minutes.|<&ns><&ns><&ns><&ns> TPS lag <&ns><&ns><&ns><&ns>|Perc.[time]"
    
    - define extra_tick_info 
      li@[1s]|[3.3s]|[270s]
    
    - execute as_server
      "ncp lag"
      save:ncp_stats
    
    - define ncpstats
      <entry[ncp_stats].output>
    
    - define reduced
      "<def[ncpstats].as_string.split[<&co>]>"
    
    - define lag_spikes_data
      <def[reduced].get[2]>
    
    - foreach <def[extra_spike_info]> {
        - define lag_spikes_data <def[lag_spikes_data].replace[<def[value]>]>
        }
    
    - define avg_tick_data
      <def[reduced].get[3]>
    
    - foreach <def[extra_tick_info]> {
        - define avg_tick_data <def[avg_tick_data].replace[<def[value]>]>
        }
    
    
    - announce "<gold>spike data<&co> <red><def[lag_spikes_data]>"
    - announce "<gold>tick data<&co> <red><def[avg_tick_data]>"
    
