#Some basic formatting for signs.
#

Sign Handling:
    type: world
    debug: false
    # This listens to players trying to change signs.
    # This also listens to sign breaks and compares if somthing set a flag
    # So that if a player is using the command ./signedit (line) (text)
    # they just punch the signs and the sign changes its form.
    # That command was last located in the server commands file
    events:
        on player breaks sign_post:
        - if <player.has_flag[editing_sign]>
          determine cancelled
        
        on player breaks wall_sign:
        - if <player.has_flag[editing_sign]>
          determine cancelled
        
        on player changes sign_post:
        #Some selective escaping for special characters.
        - define new <proc[Iconize].context[<context.new.escaped>].unescaped>
        - announce "<script.name> <def[new].space_separated> "
        - determine <def[new].space_separated>
        
        on player changes wall_sign:
        #Some selective escaping for special characters.
        - define new <proc[Iconize].context[<context.new.escaped>]>
        - announce "<script.name> <def[new].space_separated> "
        - determine <def[new].unescaped>
            
        on player animates ARM_SWING:
        - define looking_at <player.location.cursor_on[4]>
        - define block <def[looking_at].material.name>
        - define signs li@wall_sign|sign_post
        - if !<def[signs].contains[<def[block]>]>
          queue clear
        
        - if <player.has_flag[editing_sign]>
          run "Modify Sign Line" "def:<def[looking_at]>|<player.flag[editing_sign].as_list.space_separated.replace[ ].with[|]>"
        
        
        
        on signedit command:
        # This command depends on the mod server sign handling
        # This only sets up the options for the server to handle the player break sign event.
        - determine passively fulfilled
        - inject locally "is permitted"
        
        - define line <context.parsed_args.get[1]||none>
        - define text <context.parsed_args.get[2]||none>
        - define is_int "Is int: <proc[Is Int].context[%line%]>"
        - if "!<proc[Is Int].context[%line%]>" 
          || <def[line]> == none {
            - narrate format:SAI "You did not specify a line to edit. That should be your 2nd argument."                           
            - narrate format:SAI "<bold>ex: <reset><&dot><&bs><blue>signedit <yellow>1 <gray><&dq>This is your first line<&dq>"
            - queue clear
            }
        - if <def[text]> == none
          || <def[text]> == "" {
            - define text "<reset>"
            } else {
            - define text <proc[Iconize].context[%text%]>
            }
            
        - narrate                  ""
        - narrate format:Formatted "<gray>Ready to edit line<white>: <gold>%line% <gray>with: <reset>%text%"
        - narrate format:Formatted "<gray>Please <underline>punch <gray>the <gold>sign(s) <gray>you want to change in <gold>10 <gray>seconds."
        
        - flag player "editing_sign:%line%|%text%" duration:10
        
    


Modify Sign Line:
    #############################################################################################################################
    #                                                                                                                           #
    # location is a sign location.                                                                                              #
    # Line is a line number to alter                                                                                            #
    # Text is the text to alter with                                                                                            #
    #                                                                                                                           #
    #############################################################################################################################
    type: task
    debug: false
    definitions: location|line|text
    type_location: as_location
    type_line: as_int
    script:
    #- inject "announce arguments passed"
    - ^inject typecheck
    - ^define type <def[location].material.name>
    - ^define lines li@1|2|3|4
    - ^define sign ""
    - foreach <def[lines]> {
        - if <def[value]> == <def[line]> {
            
            - if <def[sign]> == "" {
                - define sign <def[text]>
                } else {
                - define sign <def[sign]>|<def[text]>
                }
            
            } else {
            
            - if <def[sign]> == "" {
                - define sign <def[location].sign_contents.get[<def[value]>]>
                } else {
                - define sign <def[sign]>|<def[location].sign_contents.get[<def[value]>]>
                }
            
            }
        }
    - ^sign automatic <def[sign].replace[li@]> <def[location]>
    